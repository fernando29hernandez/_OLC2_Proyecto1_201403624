/* The following code was generated by JFlex 1.4.1 on 21/12/19 12:42 AM */

package Analizadores;
import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 21/12/19 12:42 AM from the specification file
 * <tt>FLEXRSYNTAX</tt>
 */
public class FLEXRSINTAX extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\11\1\0\1\10\1\6\22\0\1\10\1\55\1\4"+
    "\1\0\1\0\1\56\1\60\1\3\2\14\1\13\1\61\1\6\1\62"+
    "\1\6\1\12\12\2\1\55\1\6\1\63\1\57\1\64\1\55\1\0"+
    "\1\42\5\1\1\46\1\1\1\50\4\1\1\43\1\1\1\42\1\1"+
    "\1\37\2\1\1\47\5\1\1\14\1\5\1\14\1\55\1\7\1\0"+
    "\1\30\1\40\1\27\1\31\1\21\1\23\1\34\1\16\1\17\1\52"+
    "\1\53\1\20\1\35\1\22\1\24\1\36\1\51\1\25\1\26\1\33"+
    "\1\32\1\45\1\15\1\41\1\54\1\44\1\14\1\65\1\14\1\55"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\2\7\1\10\17\1\7\7\1\11\1\12\1\11\1\13"+
    "\1\3\1\14\1\3\1\0\1\15\2\4\10\1\1\16"+
    "\1\17\2\1\1\20\27\1\1\21\1\22\1\23\1\24"+
    "\22\1\1\25\47\1\1\25\62\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\154\0\u01e6\0\u021c\0\154\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\154\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\154\0\u06f6\0\u072c\0\u0762"+
    "\0\154\0\u0798\0\u07ce\0\154\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\154"+
    "\0\u0a56\0\u0a8c\0\242\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\154\0\154\0\154\0\242\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\242\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\2\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\4\1\17\1\4"+
    "\1\20\1\21\1\22\1\4\1\23\1\24\1\25\1\26"+
    "\1\27\1\4\1\30\1\31\2\4\1\32\1\33\3\4"+
    "\1\34\10\4\1\35\2\14\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\11\44\1\45\1\44\1\46\52\44\67\0"+
    "\2\4\4\0\1\4\5\0\40\4\11\0\2\47\1\5"+
    "\2\0\1\47\1\0\1\47\5\0\40\47\11\0\3\50"+
    "\1\51\1\50\1\52\3\50\1\53\54\50\4\7\1\54"+
    "\1\55\3\7\1\56\54\7\1\0\2\4\4\0\1\4"+
    "\5\0\1\57\1\4\1\60\1\4\1\61\3\4\1\62"+
    "\1\4\1\63\1\64\5\4\1\65\4\4\1\66\11\4"+
    "\21\0\1\11\67\0\1\67\1\70\43\0\1\35\65\0"+
    "\1\35\7\0\2\4\4\0\1\4\5\0\1\4\1\71"+
    "\36\4\12\0\2\4\4\0\1\4\5\0\5\4\1\72"+
    "\1\73\11\4\1\74\17\4\12\0\2\4\4\0\1\4"+
    "\5\0\3\4\1\75\1\4\1\76\32\4\12\0\2\4"+
    "\4\0\1\4\5\0\3\4\1\77\34\4\12\0\2\4"+
    "\4\0\1\4\5\0\7\4\1\100\3\4\1\101\1\4"+
    "\1\102\22\4\12\0\2\4\4\0\1\4\5\0\4\4"+
    "\1\103\2\4\1\104\30\4\12\0\2\4\4\0\1\4"+
    "\5\0\1\105\1\4\1\106\1\4\1\107\33\4\12\0"+
    "\2\4\4\0\1\4\5\0\1\4\1\110\11\4\1\75"+
    "\24\4\12\0\2\4\4\0\1\4\5\0\3\4\1\111"+
    "\34\4\12\0\2\4\4\0\1\4\5\0\4\4\1\112"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\10\4\1\113"+
    "\27\4\12\0\2\4\4\0\1\4\5\0\4\4\1\107"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\3\4\1\114"+
    "\5\4\1\115\4\4\1\116\1\4\1\117\2\4\1\120"+
    "\14\4\12\0\2\4\4\0\1\4\5\0\15\4\1\121"+
    "\22\4\12\0\2\4\4\0\1\4\5\0\10\4\1\122"+
    "\27\4\71\0\1\35\64\0\1\35\1\0\1\35\63\0"+
    "\1\35\2\0\1\35\66\0\1\14\66\0\1\14\66\0"+
    "\1\35\11\44\1\0\1\44\1\0\52\44\12\0\1\123"+
    "\53\0\3\47\2\0\1\47\1\0\1\47\5\0\40\47"+
    "\11\0\3\52\1\124\5\52\1\0\57\52\1\51\5\52"+
    "\1\0\54\52\3\0\1\124\62\0\11\56\1\0\60\56"+
    "\1\125\1\55\60\56\1\0\2\4\4\0\1\4\5\0"+
    "\6\4\1\126\1\4\1\127\27\4\12\0\2\4\4\0"+
    "\1\4\5\0\20\4\1\130\17\4\12\0\2\4\4\0"+
    "\1\4\5\0\34\4\1\131\3\4\12\0\2\4\4\0"+
    "\1\4\5\0\4\4\1\132\33\4\12\0\2\4\4\0"+
    "\1\4\5\0\3\4\1\133\3\4\1\134\30\4\12\0"+
    "\2\4\4\0\1\4\5\0\4\4\1\135\7\4\1\136"+
    "\1\4\1\137\2\4\1\140\1\4\1\141\14\4\12\0"+
    "\2\4\4\0\1\4\5\0\4\4\1\142\33\4\12\0"+
    "\2\4\4\0\1\4\5\0\15\4\1\143\22\4\11\0"+
    "\11\67\1\0\54\67\1\0\2\4\4\0\1\4\5\0"+
    "\2\4\1\144\1\4\1\145\33\4\12\0\2\4\4\0"+
    "\1\4\5\0\2\4\1\146\35\4\12\0\2\4\4\0"+
    "\1\4\5\0\21\4\1\147\16\4\12\0\2\4\4\0"+
    "\1\4\5\0\11\4\1\150\26\4\12\0\2\4\4\0"+
    "\1\4\5\0\16\4\1\151\21\4\12\0\2\4\4\0"+
    "\1\4\5\0\7\4\1\73\30\4\12\0\2\4\4\0"+
    "\1\4\5\0\10\4\1\73\27\4\12\0\2\4\4\0"+
    "\1\4\5\0\3\4\1\75\34\4\12\0\2\4\4\0"+
    "\1\4\5\0\11\4\1\152\26\4\12\0\2\4\4\0"+
    "\1\4\5\0\17\4\1\153\1\4\1\154\16\4\12\0"+
    "\2\4\4\0\1\4\5\0\20\4\1\155\17\4\12\0"+
    "\2\4\4\0\1\4\5\0\2\4\1\156\35\4\12\0"+
    "\2\4\4\0\1\4\5\0\17\4\1\157\20\4\12\0"+
    "\2\4\4\0\1\4\5\0\16\4\1\160\21\4\12\0"+
    "\2\4\4\0\1\4\5\0\10\4\1\151\27\4\12\0"+
    "\2\4\4\0\1\161\5\0\16\4\1\162\21\4\12\0"+
    "\2\4\4\0\1\4\5\0\6\4\1\163\3\4\1\151"+
    "\25\4\12\0\2\4\4\0\1\4\5\0\15\4\1\150"+
    "\22\4\12\0\2\4\4\0\1\4\5\0\23\4\1\121"+
    "\14\4\12\0\2\4\4\0\1\4\5\0\16\4\1\164"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\24\4\1\165"+
    "\13\4\12\0\2\4\4\0\1\4\5\0\4\4\1\166"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\16\4\1\167"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\3\4\1\151"+
    "\34\4\12\0\2\4\4\0\1\4\5\0\7\4\1\151"+
    "\30\4\12\0\2\4\4\0\1\4\5\0\2\4\1\170"+
    "\35\4\12\0\2\4\4\0\1\4\5\0\21\4\1\126"+
    "\16\4\12\0\2\4\4\0\1\4\5\0\3\4\1\171"+
    "\34\4\12\0\2\4\4\0\1\4\5\0\11\4\1\172"+
    "\1\4\1\173\24\4\12\0\2\4\4\0\1\4\5\0"+
    "\7\4\1\174\30\4\12\0\2\4\4\0\1\4\5\0"+
    "\5\4\1\175\32\4\12\0\2\4\4\0\1\4\5\0"+
    "\5\4\1\176\32\4\12\0\2\4\4\0\1\4\5\0"+
    "\4\4\1\175\33\4\12\0\2\4\4\0\1\4\5\0"+
    "\24\4\1\176\13\4\12\0\2\4\4\0\1\4\5\0"+
    "\4\4\1\177\33\4\12\0\2\4\4\0\1\4\5\0"+
    "\10\4\1\200\27\4\12\0\2\4\4\0\1\4\5\0"+
    "\11\4\1\201\26\4\12\0\2\4\4\0\1\4\5\0"+
    "\4\4\1\202\33\4\12\0\2\4\4\0\1\4\5\0"+
    "\3\4\1\150\34\4\12\0\2\4\4\0\1\4\5\0"+
    "\5\4\1\73\32\4\12\0\2\4\4\0\1\4\5\0"+
    "\12\4\1\203\25\4\12\0\2\4\4\0\1\4\5\0"+
    "\7\4\1\204\30\4\12\0\2\4\4\0\1\4\5\0"+
    "\4\4\1\73\33\4\12\0\2\4\4\0\1\4\5\0"+
    "\2\4\1\167\35\4\12\0\2\4\4\0\1\4\5\0"+
    "\10\4\1\205\27\4\12\0\2\4\4\0\1\4\5\0"+
    "\4\4\1\206\33\4\12\0\2\4\4\0\1\4\5\0"+
    "\21\4\1\207\16\4\12\0\2\4\4\0\1\4\5\0"+
    "\16\4\1\210\21\4\12\0\2\4\4\0\1\4\5\0"+
    "\13\4\1\73\24\4\12\0\2\4\4\0\1\4\5\0"+
    "\13\4\1\211\2\4\1\212\2\4\1\213\16\4\12\0"+
    "\2\4\4\0\1\4\5\0\14\4\1\214\23\4\12\0"+
    "\2\4\4\0\1\4\5\0\7\4\1\215\30\4\12\0"+
    "\2\4\4\0\1\4\5\0\2\4\1\216\10\4\1\217"+
    "\24\4\12\0\2\4\4\0\1\4\5\0\10\4\1\220"+
    "\27\4\12\0\2\4\4\0\1\4\5\0\16\4\1\221"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\5\4\1\222"+
    "\32\4\12\0\2\4\4\0\1\4\5\0\7\4\1\223"+
    "\30\4\12\0\2\4\4\0\1\4\5\0\16\4\1\224"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\11\4\1\126"+
    "\26\4\12\0\2\4\4\0\1\4\5\0\4\4\1\225"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\14\4\1\126"+
    "\23\4\12\0\2\4\4\0\1\4\5\0\11\4\1\224"+
    "\26\4\12\0\2\4\4\0\1\4\5\0\12\4\1\126"+
    "\25\4\12\0\2\4\4\0\1\4\5\0\16\4\1\126"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\5\4\1\173"+
    "\32\4\12\0\2\4\4\0\1\4\5\0\2\4\1\226"+
    "\35\4\12\0\2\4\4\0\1\4\5\0\7\4\1\227"+
    "\30\4\12\0\2\4\4\0\1\4\5\0\30\4\1\230"+
    "\7\4\12\0\2\4\4\0\1\4\5\0\2\4\1\231"+
    "\35\4\12\0\2\4\4\0\1\4\5\0\10\4\1\232"+
    "\27\4\12\0\2\4\4\0\1\4\5\0\4\4\1\233"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\13\4\1\234"+
    "\24\4\12\0\2\4\4\0\1\4\5\0\4\4\1\100"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\12\4\1\235"+
    "\25\4\12\0\2\4\4\0\1\4\5\0\3\4\1\236"+
    "\1\4\1\237\32\4\12\0\2\4\4\0\1\4\5\0"+
    "\4\4\1\240\33\4\12\0\2\4\4\0\1\4\5\0"+
    "\7\4\1\171\30\4\12\0\2\4\4\0\1\4\5\0"+
    "\13\4\1\241\24\4\12\0\2\4\4\0\1\242\5\0"+
    "\40\4\12\0\2\4\4\0\1\4\5\0\5\4\1\243"+
    "\32\4\12\0\2\4\4\0\1\4\5\0\15\4\1\244"+
    "\22\4\12\0\2\4\4\0\1\4\5\0\2\4\1\245"+
    "\35\4\12\0\2\4\4\0\1\4\5\0\25\4\2\151"+
    "\11\4\12\0\2\4\4\0\1\4\5\0\11\4\1\246"+
    "\26\4\12\0\2\4\4\0\1\4\5\0\5\4\1\151"+
    "\32\4\12\0\2\4\4\0\1\4\5\0\4\4\1\126"+
    "\33\4\12\0\2\4\4\0\1\4\5\0\10\4\1\247"+
    "\27\4\12\0\2\4\4\0\1\4\5\0\10\4\1\250"+
    "\27\4\12\0\2\4\4\0\1\4\5\0\14\4\1\224"+
    "\23\4\12\0\2\4\4\0\1\4\5\0\7\4\1\251"+
    "\30\4\12\0\2\4\4\0\1\4\5\0\13\4\1\226"+
    "\24\4\12\0\2\4\4\0\1\4\5\0\16\4\1\252"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\11\4\1\252"+
    "\26\4\12\0\2\4\4\0\1\4\5\0\16\4\1\73"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\1\4\1\73"+
    "\36\4\12\0\2\4\4\0\1\4\5\0\16\4\1\253"+
    "\21\4\12\0\2\4\4\0\1\4\5\0\12\4\1\254"+
    "\25\4\12\0\2\4\4\0\1\4\5\0\24\4\1\236"+
    "\13\4\12\0\2\4\4\0\1\4\5\0\10\4\1\255"+
    "\27\4\12\0\2\4\4\0\1\4\5\0\37\4\1\256"+
    "\12\0\2\4\4\0\1\4\5\0\2\4\1\100\35\4"+
    "\12\0\2\4\4\0\1\4\5\0\3\4\1\234\34\4"+
    "\12\0\2\4\4\0\1\4\5\0\5\4\1\257\32\4"+
    "\12\0\2\4\4\0\1\4\5\0\13\4\1\260\24\4"+
    "\12\0\2\4\4\0\1\4\5\0\30\4\1\261\7\4"+
    "\12\0\2\4\4\0\1\262\5\0\40\4\12\0\2\4"+
    "\4\0\1\263\5\0\40\4\12\0\2\4\4\0\1\4"+
    "\5\0\13\4\1\100\24\4\12\0\2\4\4\0\1\4"+
    "\5\0\7\4\1\126\30\4\12\0\2\4\4\0\1\4"+
    "\5\0\1\4\1\253\36\4\12\0\2\4\4\0\1\264"+
    "\5\0\40\4\12\0\2\4\4\0\1\265\5\0\40\4"+
    "\12\0\2\4\4\0\1\4\5\0\17\4\1\151\20\4"+
    "\12\0\2\4\4\0\1\4\5\0\35\4\1\224\2\4"+
    "\12\0\2\4\4\0\1\4\5\0\13\4\1\266\24\4"+
    "\12\0\2\4\4\0\1\4\5\0\30\4\1\267\7\4"+
    "\12\0\2\4\4\0\1\4\5\0\31\4\1\270\6\4"+
    "\12\0\2\4\4\0\1\4\5\0\12\4\1\271\25\4"+
    "\12\0\2\4\4\0\1\4\5\0\13\4\1\272\24\4"+
    "\12\0\2\4\4\0\1\4\5\0\10\4\1\126\27\4"+
    "\12\0\2\4\4\0\1\4\5\0\4\4\1\273\33\4"+
    "\12\0\2\4\4\0\1\4\5\0\32\4\1\274\5\4"+
    "\12\0\2\4\4\0\1\4\5\0\3\4\1\275\34\4"+
    "\12\0\2\4\4\0\1\4\5\0\5\4\1\237\32\4"+
    "\12\0\2\4\4\0\1\4\5\0\5\4\1\276\32\4"+
    "\12\0\2\4\4\0\1\4\5\0\33\4\1\126\4\4"+
    "\12\0\2\4\4\0\1\4\5\0\2\4\1\277\35\4"+
    "\12\0\2\4\4\0\1\4\5\0\16\4\1\300\21\4"+
    "\12\0\2\4\4\0\1\4\5\0\12\4\1\301\25\4"+
    "\12\0\2\4\4\0\1\4\5\0\13\4\1\302\24\4"+
    "\12\0\2\4\4\0\1\4\5\0\36\4\1\126\1\4"+
    "\12\0\2\4\4\0\1\4\5\0\5\4\1\303\32\4"+
    "\12\0\2\4\4\0\1\4\5\0\13\4\1\126\24\4"+
    "\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9828];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\2\1\1\11\17\1\1\11"+
    "\7\1\1\11\3\1\1\11\1\1\1\0\1\11\13\1"+
    "\1\11\32\1\3\11\156\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public FLEXRSINTAX() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FLEXRSINTAX(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FLEXRSINTAX(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
 
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
 


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 18: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 23: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 24: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 26: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 27: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 28: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 20: 
          { addToken(Token.FUNCTION);
          }
        case 30: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 31: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 32: break;
        case 21: 
          { addToken(Token.DATA_TYPE);
          }
        case 33: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 12: 
          { addToken(Token.ERROR_CHAR);
          }
        case 35: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 36: break;
        case 14: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 37: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 9: 
          { 
          }
        case 41: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 196: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 197: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
