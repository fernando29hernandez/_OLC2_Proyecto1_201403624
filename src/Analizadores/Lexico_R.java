/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.Symbol; 
import Arbol.Entorno.Errores;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico_R</tt>
 */
public class Lexico_R implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIOS = 2;
  public static final int RECONOCER_CADENA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\11\1\13\1\13\1\12\22\0\1\14\1\77\1\56"+
    "\1\105\1\0\1\61\1\76\1\6\1\65\1\66\1\73\1\71\1\102"+
    "\1\72\1\3\1\10\1\60\11\2\1\104\1\103\1\100\1\62\1\101"+
    "\1\57\1\0\1\45\5\4\1\52\1\4\1\54\4\4\1\47\1\4"+
    "\1\46\1\4\1\44\2\4\1\53\5\4\1\67\1\7\1\70\1\74"+
    "\1\5\1\0\1\16\1\32\1\27\1\31\1\25\1\34\1\40\1\30"+
    "\1\17\1\50\1\51\1\24\1\15\1\20\1\23\1\37\1\43\1\22"+
    "\1\35\1\26\1\33\1\41\1\36\1\42\1\55\1\21\1\63\1\75"+
    "\1\64\7\0\1\13\32\0\1\1\20\0\1\4\21\0\1\4\u15bc\0"+
    "\1\1\u097f\0\13\1\15\0\1\4\17\0\1\13\1\13\5\0\1\1"+
    "\57\0\1\1\u0fa0\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\2\20\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\2\1\1\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\2\1\34\1\35\1\34\1\36\1\37\2\0"+
    "\10\5\2\0\1\40\4\5\1\41\30\5\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\14\5\1\65\2\5\1\66\2\67\4\5\1\70"+
    "\1\71\3\5\1\72\3\5\1\73\1\74\1\5\1\75"+
    "\1\5\1\76\22\5\1\77\10\5\1\100\6\5\1\101"+
    "\1\102\1\103\4\5\1\104\5\5\1\105\4\5\1\106"+
    "\1\107\3\5\1\110\1\111\1\112\2\5\1\113\1\5"+
    "\1\114\1\115\14\5\1\116\6\5\1\117\5\5\1\120"+
    "\1\121\1\122\1\123\3\5\1\124\1\5\1\125\1\126"+
    "\5\5\1\127\1\130\3\5\1\131\3\5\1\132\1\133"+
    "\3\5\1\134\5\5\1\135\5\5\1\136\1\137\1\5"+
    "\1\140\2\5\1\141\2\5\1\142\5\5\1\143\1\5"+
    "\1\144\1\145\1\146\1\147\1\150\1\151\2\5\1\152"+
    "\5\5\1\153\10\5\1\154\1\5\1\155\2\5\1\156"+
    "\1\5\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\322\0\u0118\0\322\0\u015e"+
    "\0\u01a4\0\u01ea\0\u0230\0\322\0\u0276\0\u02bc\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\322\0\322\0\u071c"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\u0762\0\u07a8"+
    "\0\322\0\322\0\u07ee\0\u0834\0\322\0\u087a\0\u08c0\0\322"+
    "\0\322\0\322\0\322\0\u0906\0\322\0\322\0\u094c\0\322"+
    "\0\322\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\322\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u015e\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a"+
    "\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\322\0\322\0\322\0\322\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\u0992\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u015e\0\u17ca\0\u1810\0\322\0\322\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u015e\0\u015e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u015e\0\u1a86\0\u1acc\0\u1b12\0\u015e\0\u015e\0\u1b58"+
    "\0\u015e\0\u1b9e\0\u015e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u015e\0\u20d0\0\u2116"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u015e\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u015e\0\u015e\0\u015e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u015e\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u26d4\0\u015e\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u015e"+
    "\0\u2832\0\u2878\0\u28be\0\u2904\0\u015e\0\u015e\0\u015e\0\u294a"+
    "\0\u2990\0\u015e\0\u29d6\0\u015e\0\u015e\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u015e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u015e\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u3066\0\u30ac\0\u30f2\0\u015e\0\u3138\0\u015e"+
    "\0\u015e\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u015e\0\u015e"+
    "\0\u32dc\0\u3322\0\u3368\0\u015e\0\u33ae\0\u33f4\0\u343a\0\u015e"+
    "\0\u015e\0\u3480\0\u34c6\0\u350c\0\u015e\0\u3552\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u015e\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8"+
    "\0\u015e\0\u015e\0\u380e\0\u015e\0\u3854\0\u389a\0\u015e\0\u38e0"+
    "\0\u3926\0\u015e\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u015e"+
    "\0\u3aca\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u3b10"+
    "\0\u3b56\0\u015e\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u015e"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u015e\0\u3f2a\0\u015e\0\u3f70\0\u3fb6\0\u015e\0\u3ffc\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\5\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\2\10\1\24\1\25\1\26\1\10"+
    "\1\27\1\30\1\10\1\31\1\32\1\33\1\10\1\34"+
    "\3\10\1\35\11\10\1\36\1\4\1\6\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\11\5\1\14\2\0\57\5\1\64"+
    "\12\5\6\65\1\66\1\67\1\65\3\0\42\65\1\70"+
    "\2\65\1\71\24\65\110\0\1\6\1\72\54\0\1\6"+
    "\27\0\1\10\1\0\2\10\7\0\41\10\2\0\1\10"+
    "\27\0\1\10\1\0\1\10\1\73\7\0\1\10\1\74"+
    "\1\75\2\10\1\76\2\10\1\77\1\10\1\100\6\10"+
    "\1\101\1\102\7\10\1\103\6\10\2\0\1\10\25\0"+
    "\6\104\2\0\76\104\10\0\1\105\62\0\1\106\24\0"+
    "\1\15\1\0\1\15\73\0\1\10\1\0\2\10\7\0"+
    "\1\10\1\107\37\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\7\10\1\110\31\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\1\111\2\10\1\112\13\10"+
    "\1\113\21\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\7\10\1\114\31\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\5\10\1\115\33\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\6\10\1\116\1\10"+
    "\1\117\30\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\3\10\1\120\3\10\1\121\31\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\5\10\1\122\33\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\1\10"+
    "\1\123\11\10\1\124\25\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\10\10\1\125\30\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\16\10\1\126\22\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\1\10"+
    "\1\127\4\10\1\130\7\10\1\131\22\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\2\10\1\132\5\10"+
    "\1\133\10\10\1\134\17\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\13\10\1\135\25\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\10\10\1\136\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\1\137"+
    "\6\10\1\140\1\10\1\141\3\10\1\142\2\10\1\143"+
    "\20\10\2\0\1\10\107\0\1\144\114\0\1\145\106\0"+
    "\1\146\110\0\1\147\106\0\1\150\71\0\1\151\16\0"+
    "\1\152\66\0\1\153\33\0\1\154\104\0\1\155\10\0"+
    "\1\156\1\0\1\157\3\0\1\160\3\0\1\161\1\0"+
    "\1\162\21\0\1\163\1\164\1\165\27\0\1\166\55\0"+
    "\1\166\27\0\1\10\1\0\1\10\1\73\7\0\41\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\7\10"+
    "\1\167\1\170\1\171\2\10\1\172\1\173\4\10\1\174"+
    "\16\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\1\175\40\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\10\10\1\176\30\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\26\10\1\177\12\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\6\10\1\200\1\201"+
    "\31\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\5\10\1\202\11\10\1\203\21\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\10\10\1\204\30\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\16\10\1\205"+
    "\22\10\2\0\1\10\33\0\1\206\77\0\11\105\1\207"+
    "\1\210\1\0\72\105\2\0\1\10\1\0\2\10\7\0"+
    "\2\10\1\211\36\10\2\0\1\10\27\0\1\10\1\0"+
    "\1\10\1\212\7\0\41\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\22\10\1\213\16\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\2\10\1\214\36\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\6\10"+
    "\1\215\32\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\6\10\1\216\32\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\1\217\40\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\22\10\1\220\1\221\15\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\222\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\20\10\1\223\20\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\16\10\1\224\22\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\20\10\1\225\20\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\5\10"+
    "\1\226\33\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\12\10\1\227\4\10\1\230\21\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\7\10\1\231\31\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\7\10"+
    "\1\232\31\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\5\10\1\233\33\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\20\10\1\234\20\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\23\10\1\235\15\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\236\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\2\10\1\237\36\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\2\10\1\240\5\10\1\241\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\242\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\10\10\1\243\30\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\15\10\1\244\23\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\25\10\1\245\13\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\246\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\11\10\1\247\27\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\11\10\1\250\27\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\3\10\1\251\35\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\25\10"+
    "\1\252\13\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\10\10\1\253\30\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\5\10\1\254\33\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\10\10\1\255\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\22\10"+
    "\1\256\16\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\1\10\1\257\16\10\1\260\20\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\7\10\1\261\31\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\3\10"+
    "\1\262\35\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\6\10\1\263\32\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\2\10\1\264\36\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\20\10\1\265\20\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\10\10"+
    "\1\266\30\10\2\0\1\10\36\0\1\207\76\0\1\10"+
    "\1\0\2\10\7\0\3\10\1\267\35\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\14\10\1\270\24\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\6\10"+
    "\1\271\32\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\12\10\1\272\26\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\22\10\1\273\16\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\10\10\1\274\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\5\10"+
    "\1\275\33\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\10\10\1\276\30\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\10\10\1\277\30\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\10\10\1\300\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\1\10"+
    "\1\301\1\302\36\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\20\10\1\303\20\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\2\10\1\304\36\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\1\10\1\305"+
    "\37\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\1\10\1\306\7\10\1\307\10\10\1\310\16\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\11\10\1\311"+
    "\27\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\7\10\1\312\31\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\3\10\1\313\35\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\1\10\1\314\7\10\1\315"+
    "\10\10\1\316\16\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\3\10\1\317\35\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\7\10\1\320\31\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\11\10\1\321"+
    "\27\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\6\10\1\322\32\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\5\10\1\323\33\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\6\10\1\324\32\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\11\10\1\325"+
    "\27\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\11\10\1\326\27\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\12\10\1\327\26\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\2\10\1\330\36\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\3\10\1\331"+
    "\35\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\14\10\1\332\24\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\10\10\1\333\30\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\20\10\1\334\20\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\12\10\1\335"+
    "\26\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\20\10\1\336\20\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\11\10\1\337\27\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\6\10\1\340\32\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\24\10\1\341"+
    "\14\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\1\10\1\342\37\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\5\10\1\343\33\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\2\10\1\344\36\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\10\10\1\345"+
    "\30\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\1\10\1\346\37\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\10\10\1\347\30\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\16\10\1\350\22\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\3\10\1\351"+
    "\35\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\10\10\1\352\30\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\6\10\1\353\32\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\3\10\1\354\3\10\1\355"+
    "\31\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\10\10\1\356\30\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\6\10\1\357\32\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\12\10\1\360\26\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\10\10\1\361"+
    "\30\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\3\10\1\362\3\10\1\363\31\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\10\10\1\364\30\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\6\10\1\365"+
    "\32\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\20\10\1\366\20\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\30\10\1\367\1\370\1\371\6\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\3\10\1\372"+
    "\35\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\2\10\1\373\36\10\2\0\1\10\27\0\1\10\1\0"+
    "\1\10\1\374\7\0\41\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\5\10\1\375\33\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\14\10\1\376\24\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\5\10"+
    "\1\377\33\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\10\10\1\u0100\30\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\10\10\1\u0101\30\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\14\10\1\u0102\24\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\6\10"+
    "\1\u0103\32\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\5\10\1\u0104\33\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\11\10\1\u0105\27\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\1\10\1\u0106\37\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\5\10"+
    "\1\u0107\33\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\11\10\1\u0108\27\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\20\10\1\u0109\20\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\7\10\1\u010a\31\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\2\10"+
    "\1\u010b\36\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\3\10\1\u010c\35\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\12\10\1\u010d\26\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\11\10\1\u010e\27\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\25\10"+
    "\1\u010f\13\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\20\10\1\u0110\20\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\13\10\1\u0111\25\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\12\10\1\u0112\26\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\u0113\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\25\10\1\u0114\13\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\20\10\1\u0115\20\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\1\10\1\u0116\37\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\3\10"+
    "\1\u0117\35\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\40\10\1\u0118\2\0\1\10\27\0\1\10\1\0"+
    "\1\10\1\u0119\7\0\41\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\24\10\1\u011a\14\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\10\10\1\u011b\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\1\10\1\u011c\7\0"+
    "\41\10\2\0\1\10\27\0\1\10\1\0\1\10\1\u011d"+
    "\7\0\41\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\1\10\1\u011e\37\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\5\10\1\u011f\33\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\1\10\1\u0120\37\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\u0121\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\5\10\1\u0122\33\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\13\10\1\u0123\25\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\6\10\1\u0124\32\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\u0125\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\13\10\1\u0126\25\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\6\10\1\u0127\32\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\11\10\1\u0128\27\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\33\10"+
    "\1\u0129\5\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\23\10\1\u012a\15\10\2\0\1\10\27\0\1\10"+
    "\1\0\1\10\1\u012b\7\0\41\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\24\10\1\u012c\14\10\2\0"+
    "\1\10\27\0\1\10\1\0\2\10\7\0\1\10\1\u012d"+
    "\37\10\2\0\1\10\27\0\1\10\1\0\2\10\7\0"+
    "\35\10\1\u012e\3\10\2\0\1\10\27\0\1\10\1\0"+
    "\2\10\7\0\12\10\1\u012f\26\10\2\0\1\10\27\0"+
    "\1\10\1\0\2\10\7\0\5\10\1\u0130\33\10\2\0"+
    "\1\10\27\0\1\10\1\0\1\10\1\u0131\7\0\41\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\5\10"+
    "\1\u0132\33\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\6\10\1\u0133\32\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\6\10\1\u0134\32\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\6\10\1\u0135\32\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\6\10"+
    "\1\u0136\32\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\10\10\1\u0137\30\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\1\10\1\u0138\37\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\10\10\1\u0139\30\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\5\10"+
    "\1\u013a\33\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\36\10\1\u013b\2\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\7\10\1\u013c\31\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\24\10\1\u013d\14\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\3\10"+
    "\1\u013e\35\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\3\10\1\u013f\35\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\37\10\1\u0140\1\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\2\10\1\u0141\36\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\10\10"+
    "\1\u0142\30\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\12\10\1\u0143\26\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\11\10\1\u0144\27\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\12\10\1\u0145\26\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\3\10"+
    "\1\u0146\35\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\13\10\1\u0147\25\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\1\10\1\u0148\37\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\34\10\1\u0149\4\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\11\10"+
    "\1\u014a\27\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\6\10\1\u014b\32\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\3\10\1\u014c\35\10\2\0\1\10"+
    "\27\0\1\10\1\0\2\10\7\0\1\10\1\u014d\37\10"+
    "\2\0\1\10\27\0\1\10\1\0\2\10\7\0\1\10"+
    "\1\u014e\37\10\2\0\1\10\27\0\1\10\1\0\2\10"+
    "\7\0\3\10\1\u014f\35\10\2\0\1\10\27\0\1\10"+
    "\1\0\2\10\7\0\1\10\1\u0150\37\10\2\0\1\10"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\4\1\1\11\21\1\2\11"+
    "\1\1\6\11\2\1\2\11\2\1\1\11\2\1\4\11"+
    "\1\1\2\11\1\1\2\11\2\0\10\1\2\0\1\11"+
    "\35\1\22\11\20\1\2\11\311\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
StringBuffer texto_auxiliar=new StringBuffer();
String cadena_auxiliar = "";
int bandera_regreso=0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_R(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolo_R.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Errores.agregar_error("Caracter no reconocido: "+yytext(),yyline, yychar,"Lexico");
            } 
            // fall through
          case 112: break;
          case 2: 
            { 
            } 
            // fall through
          case 113: break;
          case 3: 
            { return new Symbol(Simbolo_R.entero,yyline,yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 4: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.punto,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 5: 
            { return new Symbol(Simbolo_R.identificador,yyline,yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 6: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.div,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 7: 
            { yychar=1;
            } 
            // fall through
          case 118: break;
          case 8: 
            { yybegin(RECONOCER_CADENA); cadena_auxiliar = "";
            } 
            // fall through
          case 119: break;
          case 9: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.modulo,yyline,yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 10: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.igual,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 11: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.abrirllave,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 12: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cerrarllave,yyline,yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 13: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.abrirparentesis,yyline,yychar, yytext());
            } 
            // fall through
          case 124: break;
          case 14: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cerrarparentesis,yyline,yychar, yytext());
            } 
            // fall through
          case 125: break;
          case 15: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.abrircorchete,yyline,yychar, yytext());
            } 
            // fall through
          case 126: break;
          case 16: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cerrarcorchete,yyline,yychar, yytext());
            } 
            // fall through
          case 127: break;
          case 17: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.mas,yyline,yychar, yytext());
            } 
            // fall through
          case 128: break;
          case 18: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.menos,yyline,yychar, yytext());
            } 
            // fall through
          case 129: break;
          case 19: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.por,yyline,yychar, yytext());
            } 
            // fall through
          case 130: break;
          case 20: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.potencia,yyline,yychar, yytext());
            } 
            // fall through
          case 131: break;
          case 21: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.notlogico,yyline,yychar, yytext());
            } 
            // fall through
          case 132: break;
          case 22: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.menor,yyline,yychar, yytext());
            } 
            // fall through
          case 133: break;
          case 23: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.mayor,yyline,yychar, yytext());
            } 
            // fall through
          case 134: break;
          case 24: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.coma,yyline,yychar, yytext());
            } 
            // fall through
          case 135: break;
          case 25: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.puntocoma,yyline,yychar, yytext());
            } 
            // fall through
          case 136: break;
          case 26: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.dospuntos,yyline,yychar, yytext());
            } 
            // fall through
          case 137: break;
          case 27: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.numeral,yyline,yychar, yytext());
            } 
            // fall through
          case 138: break;
          case 28: 
            { cadena_auxiliar = cadena_auxiliar + yytext();
            } 
            // fall through
          case 139: break;
          case 29: 
            { cadena_auxiliar = cadena_auxiliar + "\'";
            } 
            // fall through
          case 140: break;
          case 30: 
            { System.out.println(cadena_auxiliar);yybegin(YYINITIAL); return new Symbol(Simbolo_R.cadena,yyline,yychar,cadena_auxiliar);
            } 
            // fall through
          case 141: break;
          case 31: 
            { cadena_auxiliar = cadena_auxiliar + '%';
            } 
            // fall through
          case 142: break;
          case 32: 
            { yybegin(COMENTARIOS);
            } 
            // fall through
          case 143: break;
          case 33: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.si,yyline,yychar, yytext());
            } 
            // fall through
          case 144: break;
          case 34: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.igualigual,yyline,yychar, yytext());
            } 
            // fall through
          case 145: break;
          case 35: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.masplus,yyline,yychar, yytext());
            } 
            // fall through
          case 146: break;
          case 36: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.menosplus,yyline,yychar, yytext());
            } 
            // fall through
          case 147: break;
          case 37: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.sumalogica,yyline,yychar, yytext());
            } 
            // fall through
          case 148: break;
          case 38: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.multiplicacionlogica,yyline,yychar, yytext());
            } 
            // fall through
          case 149: break;
          case 39: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.menorigual,yyline,yychar, yytext());
            } 
            // fall through
          case 150: break;
          case 40: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.diferente,yyline,yychar, yytext());
            } 
            // fall through
          case 151: break;
          case 41: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.mayorigual,yyline,yychar, yytext());
            } 
            // fall through
          case 152: break;
          case 42: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 153: break;
          case 43: 
            { cadena_auxiliar = cadena_auxiliar + "\\";
            } 
            // fall through
          case 154: break;
          case 44: 
            { cadena_auxiliar = cadena_auxiliar + "\n";
            } 
            // fall through
          case 155: break;
          case 45: 
            { cadena_auxiliar = cadena_auxiliar + '\r';
            } 
            // fall through
          case 156: break;
          case 46: 
            { cadena_auxiliar = cadena_auxiliar + '\t';
            } 
            // fall through
          case 157: break;
          case 47: 
            { cadena_auxiliar = cadena_auxiliar + '\b';
            } 
            // fall through
          case 158: break;
          case 48: 
            { cadena_auxiliar = cadena_auxiliar + '\f';
            } 
            // fall through
          case 159: break;
          case 49: 
            { cadena_auxiliar = cadena_auxiliar + "\"";
            } 
            // fall through
          case 160: break;
          case 50: 
            { cadena_auxiliar = cadena_auxiliar + "?";
            } 
            // fall through
          case 161: break;
          case 51: 
            { cadena_auxiliar = cadena_auxiliar + '\0';
            } 
            // fall through
          case 162: break;
          case 52: 
            { return new Symbol(Simbolo_R.decimal,yyline,yychar, yytext());
            } 
            // fall through
          case 163: break;
          case 53: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.escribir,yyline,yychar, yytext());
            } 
            // fall through
          case 164: break;
          case 54: 
            { String resultado = yytext();resultado=resultado.replaceAll("'", "");System.out.println(resultado);return new Symbol(Simbolo_R.caracter,yyline,yychar,resultado);
            } 
            // fall through
          case 165: break;
          case 55: 
            { yychar=1;System.out.println(yytext());
            } 
            // fall through
          case 166: break;
          case 56: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.nulo,yyline,yychar, yytext());
            } 
            // fall through
          case 167: break;
          case 57: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.vacio,yyline,yychar, yytext());
            } 
            // fall through
          case 168: break;
          case 58: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.tipoentero,yyline,yychar, yytext());
            } 
            // fall through
          case 169: break;
          case 59: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.tipocaracter,yyline,yychar, yytext());
            } 
            // fall through
          case 170: break;
          case 60: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.tipodecimal,yyline,yychar, yytext());
            } 
            // fall through
          case 171: break;
          case 61: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.tipoboleano,yyline,yychar, yytext());
            } 
            // fall through
          case 172: break;
          case 62: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.ciclofor,yyline,yychar, yytext());
            } 
            // fall through
          case 173: break;
          case 63: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.imprimir,yyline,yychar, yytext());
            } 
            // fall through
          case 174: break;
          case 64: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.principal,yyline,yychar, yytext());
            } 
            // fall through
          case 175: break;
          case 65: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.sino,yyline,yychar, yytext());
            } 
            // fall through
          case 176: break;
          case 66: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.verdadero,yyline,yychar, yytext());
            } 
            // fall through
          case 177: break;
          case 67: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.caso,yyline,yychar, yytext());
            } 
            // fall through
          case 178: break;
          case 68: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.siga,yyline,yychar, yytext());
            } 
            // fall through
          case 179: break;
          case 69: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cuando,yyline,yychar, yytext());
            } 
            // fall through
          case 180: break;
          case 70: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.etiqueta,yyline,yychar, yytext());
            } 
            // fall through
          case 181: break;
          case 71: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cajatexto,yyline,yychar, yytext());
            } 
            // fall through
          case 182: break;
          case 72: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.aentero,yyline,yychar, yytext());
            } 
            // fall through
          case 183: break;
          case 73: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.atexto,yyline,yychar, yytext());
            } 
            // fall through
          case 184: break;
          case 74: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.adecimal,yyline,yychar, yytext());
            } 
            // fall through
          case 185: break;
          case 75: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.leer,yyline,yychar, yytext());
            } 
            // fall through
          case 186: break;
          case 76: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.compequals,yyline,yychar, yytext());
            } 
            // fall through
          case 187: break;
          case 77: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.concatenar,yyline,yychar, yytext());
            } 
            // fall through
          case 188: break;
          case 78: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.falso,yyline,yychar, yytext());
            } 
            // fall through
          case 189: break;
          case 79: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.mientras,yyline,yychar, yytext());
            } 
            // fall through
          case 190: break;
          case 80: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cajaareatexto,yyline,yychar, yytext());
            } 
            // fall through
          case 191: break;
          case 81: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.contrasena,yyline,yychar, yytext());
            } 
            // fall through
          case 192: break;
          case 82: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cajanumero,yyline,yychar, yytext());
            } 
            // fall through
          case 193: break;
          case 83: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.boton,yyline,yychar, yytext());
            } 
            // fall through
          case 194: break;
          case 84: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.buscar_abrir,yyline,yychar, yytext());
            } 
            // fall through
          case 195: break;
          case 85: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cerrar,yyline,yychar, yytext());
            } 
            // fall through
          case 196: break;
          case 86: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.abrir,yyline,yychar, yytext());
            } 
            // fall through
          case 197: break;
          case 87: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.romper,yyline,yychar, yytext());
            } 
            // fall through
          case 198: break;
          case 88: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.hacermientras,yyline,yychar, yytext());
            } 
            // fall through
          case 199: break;
          case 89: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.fusion,yyline,yychar, yytext());
            } 
            // fall through
          case 200: break;
          case 90: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.setpos,yyline,yychar, yytext());
            } 
            // fall through
          case 201: break;
          case 91: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.seleccion,yyline,yychar, yytext());
            } 
            // fall through
          case 202: break;
          case 92: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.getpos,yyline,yychar, yytext());
            } 
            // fall through
          case 203: break;
          case 93: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.pesode,yyline,yychar, yytext());
            } 
            // fall through
          case 204: break;
          case 94: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.defecto,yyline,yychar, yytext());
            } 
            // fall through
          case 205: break;
          case 95: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.definir,yyline,yychar, yytext());
            } 
            // fall through
          case 206: break;
          case 96: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.setalto,yyline,yychar, yytext());
            } 
            // fall through
          case 207: break;
          case 97: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.getalto,yyline,yychar, yytext());
            } 
            // fall through
          case 208: break;
          case 98: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.cadenaR,yyline,yychar, yytext());
            } 
            // fall through
          case 209: break;
          case 99: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.importar,yyline,yychar, yytext());
            } 
            // fall through
          case 210: break;
          case 100: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.regresar,yyline,yychar, yytext());
            } 
            // fall through
          case 211: break;
          case 101: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.setancho,yyline,yychar, yytext());
            } 
            // fall through
          case 212: break;
          case 102: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.settexto,yyline,yychar, yytext());
            } 
            // fall through
          case 213: break;
          case 103: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.getancho,yyline,yychar, yytext());
            } 
            // fall through
          case 214: break;
          case 104: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.gettexto,yyline,yychar, yytext());
            } 
            // fall through
          case 215: break;
          case 105: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.mensaje,yyline,yychar, yytext());
            } 
            // fall through
          case 216: break;
          case 106: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.reservar,yyline,yychar, yytext());
            } 
            // fall through
          case 217: break;
          case 107: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.agregar_componente,yyline,yychar, yytext());
            } 
            // fall through
          case 218: break;
          case 108: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.click,yyline,yychar, yytext());
            } 
            // fall through
          case 219: break;
          case 109: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.tamform,yyline,yychar, yytext());
            } 
            // fall through
          case 220: break;
          case 110: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.mostrar_ventana,yyline,yychar, yytext());
            } 
            // fall through
          case 221: break;
          case 111: 
            { System.out.println(yytext());return new Symbol(Simbolo_R.iniciar,yyline,yychar, yytext());
            } 
            // fall through
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
