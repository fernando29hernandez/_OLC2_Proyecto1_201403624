
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import Arbol.Entorno.Errores;
import java.util.LinkedList;
import java_cup.runtime.*;
import Arbol_OLC.Instrucciones.*;
import Arbol_OLC.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_OLC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo_OLC.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_OLC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_OLC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_OLC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\004\005\000\002\004\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\007\000" +
    "\002\006\005\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\007\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\013\005\000\002\011\013" +
    "\000\002\011\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\015\004\001\002\000\004\004\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\016\100\001\002\000\004\020\011\001\002\000" +
    "\004\015\012\001\002\000\012\005\017\006\020\007\014" +
    "\010\015\001\002\000\006\016\ufffd\017\ufffd\001\002\000" +
    "\004\020\076\001\002\000\004\020\030\001\002\000\006" +
    "\016\026\017\025\001\002\000\004\020\023\001\002\000" +
    "\004\020\021\001\002\000\004\014\022\001\002\000\006" +
    "\016\ufffb\017\ufffb\001\002\000\004\014\024\001\002\000" +
    "\006\016\ufffc\017\ufffc\001\002\000\012\005\017\006\020" +
    "\007\014\010\015\001\002\000\004\016\uffff\001\002\000" +
    "\006\016\ufffe\017\ufffe\001\002\000\004\015\031\001\002" +
    "\000\006\011\035\013\037\001\002\000\006\016\ufff6\017" +
    "\ufff6\001\002\000\006\016\075\017\050\001\002\000\006" +
    "\016\ufff5\017\ufff5\001\002\000\004\020\060\001\002\000" +
    "\006\016\ufff7\017\ufff7\001\002\000\004\020\040\001\002" +
    "\000\004\015\041\001\002\000\010\006\043\011\035\013" +
    "\037\001\002\000\004\017\053\001\002\000\004\020\044" +
    "\001\002\000\004\014\045\001\002\000\004\017\046\001" +
    "\002\000\006\011\035\013\037\001\002\000\006\016\051" +
    "\017\050\001\002\000\006\011\035\013\037\001\002\000" +
    "\006\016\uffef\017\uffef\001\002\000\006\016\ufff8\017\ufff8" +
    "\001\002\000\010\006\054\011\035\013\037\001\002\000" +
    "\004\020\055\001\002\000\004\014\056\001\002\000\004" +
    "\016\057\001\002\000\006\016\uffee\017\uffee\001\002\000" +
    "\004\015\061\001\002\000\006\006\064\012\062\001\002" +
    "\000\004\020\073\001\002\000\006\016\ufff2\017\ufff2\001" +
    "\002\000\004\020\071\001\002\000\006\016\067\017\066" +
    "\001\002\000\006\006\064\012\062\001\002\000\006\016" +
    "\ufff4\017\ufff4\001\002\000\006\016\ufff3\017\ufff3\001\002" +
    "\000\004\014\072\001\002\000\006\016\ufff1\017\ufff1\001" +
    "\002\000\004\014\074\001\002\000\006\016\ufff0\017\ufff0" +
    "\001\002\000\006\016\ufff9\017\ufff9\001\002\000\004\014" +
    "\077\001\002\000\006\016\ufffa\017\ufffa\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\005" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\032" +
    "\007\035\010\031\011\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\041\007\035\010\031\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\046\007\035\010\031\011\033\001\001\000\002" +
    "\001\001\000\010\007\051\010\031\011\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\051\010\031" +
    "\011\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\064\013\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_OLC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_OLC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_OLC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    public Arbol_OLC AST;
    public void syntax_error(Symbol s){ 
            Errores.agregar_error("Error de Orden de sentencia: "+s.value,s.left, s.right,"Sintactico");
            System.err.println("Error Sintactico en la Linea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_OLC$actions {
  private final Sintactico_OLC parser;

  /** Constructor */
  CUP$Sintactico_OLC$actions(Sintactico_OLC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_OLC$do_action_part00000000(
    int                        CUP$Sintactico_OLC$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_OLC$parser,
    java.util.Stack            CUP$Sintactico_OLC$stack,
    int                        CUP$Sintactico_OLC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_OLC$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_OLC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_OLC$parser.done_parsing();
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= abrirllave CUERPO cerrarllave 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		AST=new Arbol_OLC(a);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= proyecto dospuntos abrirllave CUERPOPROYECTO cerrarllave 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		RESULT = new PROYECTO(a,bleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOPROYECTO ::= CUERPOPROYECTO coma PROPIEDAD 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CUERPOPROYECTO",2, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPOPROYECTO ::= PROPIEDAD 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new LinkedList(); RESULT.add(a);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CUERPOPROYECTO",2, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROPIEDAD ::= ruta dospuntos cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new PROPIEDAD(a,b,aleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROPIEDAD ::= nombre dospuntos cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new PROPIEDAD(a,b,aleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROPIEDAD ::= correr dospuntos cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new PROPIEDAD(a,b,aleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROPIEDAD ::= conf dospuntos abrirllave DIRECTORIOS cerrarllave 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		RESULT = new PROPIEDAD(a,b,aleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DIRECTORIOS ::= DIRECTORIOS coma ELEMENTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("DIRECTORIOS",4, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DIRECTORIOS ::= ELEMENTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new LinkedList(); RESULT.add(a);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("DIRECTORIOS",4, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTO ::= ARCHIVO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT= a;
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("ELEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTO ::= CARPETA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT= a;
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("ELEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARCHIVO ::= archivo dospuntos abrirllave CONFARCHIVO cerrarllave 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		RESULT = new ARCHIVO(a,bleft,bright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("ARCHIVO",6, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONFARCHIVO ::= CONFARCHIVO coma CONFA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CONFARCHIVO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONFARCHIVO ::= CONFA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new LinkedList(); RESULT.add(a);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CONFARCHIVO",8, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONFA ::= nombre dospuntos cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new PROPIEDAD(a,b,aleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CONFA",9, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONFA ::= fecha dospuntos cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.peek()).value;
		RESULT = new PROPIEDAD(a,b,aleft,aright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CONFA",9, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CARPETA ::= carpeta dospuntos abrirllave nombre dospuntos cadena coma DIRECTORIOS cerrarllave 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		RESULT = new CARPETA(a,b,c,nleft,nright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CARPETA",7, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CARPETA ::= carpeta dospuntos abrirllave DIRECTORIOS coma nombre dospuntos cadena cerrarllave 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-5)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-1)).value;
		RESULT = new CARPETA(a,b,c,nleft,nright);
              CUP$Sintactico_OLC$result = parser.getSymbolFactory().newSymbol("CARPETA",7, ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.elementAt(CUP$Sintactico_OLC$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_OLC$stack.peek()), RESULT);
            }
          return CUP$Sintactico_OLC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_OLC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_OLC$do_action(
    int                        CUP$Sintactico_OLC$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_OLC$parser,
    java.util.Stack            CUP$Sintactico_OLC$stack,
    int                        CUP$Sintactico_OLC$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_OLC$do_action_part00000000(
                               CUP$Sintactico_OLC$act_num,
                               CUP$Sintactico_OLC$parser,
                               CUP$Sintactico_OLC$stack,
                               CUP$Sintactico_OLC$top);
    }
}

}
