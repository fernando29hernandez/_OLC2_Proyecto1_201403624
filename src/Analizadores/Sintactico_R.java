
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;
import Arbol.Entorno.*;
import Arbol.Expresiones.*;
import Arbol.Instrucciones.*;
import Arbol.Expresiones.Arimeticas.*;
import Arbol.Expresiones.Logicas.*;
import Arbol.Expresiones.Relacionales.*;
import Arbol.Instrucciones.Condicional.*;
import Arbol.Instrucciones.General.*;
import Arbol.Instrucciones.Iterativa.*;
import Arbol.*;
import Arbol.Instrucciones.GUI.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_R extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo_R.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_R() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_R(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_R(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\055" +
    "\005\000\002\045\007\000\002\026\005\000\002\025\006" +
    "\000\002\047\005\000\002\050\005\000\002\051\005\000" +
    "\002\052\006\000\002\053\005\000\002\030\010\000\002" +
    "\031\005\000\002\031\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\044\005\000\002\044\004\000\002\007" +
    "\010\000\002\007\007\000\002\007\011\000\002\007\012" +
    "\000\002\007\011\000\002\007\010\000\002\007\012\000" +
    "\002\007\010\000\002\007\007\000\002\007\011\000\002" +
    "\007\011\000\002\007\010\000\002\007\012\000\002\007" +
    "\007\000\002\010\003\000\002\010\003\000\002\006\005" +
    "\000\002\006\003\000\002\023\005\000\002\023\004\000" +
    "\002\024\004\000\002\027\004\000\002\016\011\000\002" +
    "\032\004\000\002\032\003\000\002\022\006\000\002\022" +
    "\005\000\002\015\007\000\002\015\011\000\002\015\011" +
    "\000\002\020\007\000\002\021\011\000\002\017\013\000" +
    "\002\033\003\000\002\033\003\000\002\054\003\000\002" +
    "\054\003\000\002\013\007\000\002\034\005\000\002\034" +
    "\003\000\002\012\004\000\002\012\006\000\002\012\005" +
    "\000\002\012\007\000\002\012\005\000\002\012\007\000" +
    "\002\012\004\000\002\012\006\000\002\012\005\000\002" +
    "\012\007\000\002\012\005\000\002\012\007\000\002\035" +
    "\005\000\002\035\004\000\002\036\006\000\002\036\005" +
    "\000\002\014\005\000\002\040\005\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\042\005\000\002\042" +
    "\006\000\002\042\003\000\002\037\005\000\002\037\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\046\005\000\002\046\004\000\002" +
    "\056\005\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\142\013\033\014\055\016\102\020\057\021" +
    "\032\022\043\023\053\026\026\027\046\031\120\032\045" +
    "\034\022\035\007\036\073\037\012\040\047\041\054\042" +
    "\061\043\010\044\064\045\044\046\062\047\066\050\006" +
    "\051\050\052\072\053\116\054\075\055\004\056\021\057" +
    "\106\060\060\062\105\063\115\064\027\065\107\070\067" +
    "\071\117\072\040\073\014\074\103\075\111\076\104\077" +
    "\024\100\036\101\114\136\101\137\005\001\002\000\004" +
    "\105\u0164\001\002\000\022\102\uff90\105\255\107\157\117" +
    "\253\120\256\124\uff90\134\uff90\137\u014b\001\002\000\010" +
    "\061\uffd5\107\uffd5\137\uffd5\001\002\000\004\105\347\001" +
    "\002\000\004\105\347\001\002\000\224\002\uff8f\013\uff8f" +
    "\014\uff8f\016\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\032\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100" +
    "\uff8f\101\uff8f\102\uff8f\104\uff8f\106\uff8f\110\uff8f\111\uff8f" +
    "\112\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\121\uff8f\122" +
    "\uff8f\124\uff8f\125\uff8f\126\uff8f\127\uff8f\130\uff8f\131\uff8f" +
    "\132\uff8f\133\uff8f\134\uff8f\135\uff8f\136\uff8f\137\uff8f\001" +
    "\002\000\004\105\347\001\002\000\152\002\uffef\013\uffef" +
    "\014\uffef\016\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100" +
    "\uffef\101\uffef\104\uffef\136\uffef\137\uffef\001\002\000\004" +
    "\105\347\001\002\000\152\002\ufff3\013\ufff3\014\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3" +
    "\104\ufff3\136\ufff3\137\ufff3\001\002\000\224\002\uff89\013" +
    "\uff89\014\uff89\016\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\031\uff89\032\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89" +
    "\060\uff89\062\uff89\063\uff89\064\uff89\065\uff89\070\uff89\071" +
    "\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89" +
    "\100\uff89\101\uff89\102\uff89\104\uff89\106\uff89\110\uff89\111" +
    "\uff89\112\uff89\113\uff89\114\uff89\115\uff89\116\uff89\121\uff89" +
    "\122\uff89\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131" +
    "\uff89\132\uff89\133\uff89\134\uff89\135\uff89\136\uff89\137\uff89" +
    "\001\002\000\152\002\ufff1\013\ufff1\014\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\104\ufff1" +
    "\136\ufff1\137\ufff1\001\002\000\004\002\u0145\001\002\000" +
    "\010\061\uffcf\107\uffcf\137\uffcf\001\002\000\004\105\347" +
    "\001\002\000\152\002\ufff6\013\ufff6\014\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\104\ufff6" +
    "\136\ufff6\137\ufff6\001\002\000\004\105\347\001\002\000" +
    "\152\002\uffe8\013\uffe8\014\uffe8\016\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8" +
    "\076\uffe8\077\uffe8\100\uffe8\101\uffe8\104\uffe8\136\uffe8\137" +
    "\uffe8\001\002\000\004\134\u0142\001\002\000\010\061\uffd6" +
    "\107\uffd6\137\uffd6\001\002\000\152\002\uffe9\013\uffe9\014" +
    "\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\031\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\070\uffe9\071\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9" +
    "\101\uffe9\104\uffe9\136\uffe9\137\uffe9\001\002\000\152\002" +
    "\ufff5\013\ufff5\014\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031\ufff5\032" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\077\ufff5\100\ufff5\101\ufff5\104\ufff5\136\ufff5\137\ufff5\001" +
    "\002\000\004\105\u013e\001\002\000\004\105\u013a\001\002" +
    "\000\004\134\u0139\001\002\000\152\002\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\065\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\101\uffe7\104\uffe7\136\uffe7\137\uffe7\001\002\000\004\105" +
    "\347\001\002\000\152\002\ufff0\013\ufff0\014\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\104" +
    "\ufff0\136\ufff0\137\ufff0\001\002\000\004\105\347\001\002" +
    "\000\152\002\uffea\013\uffea\014\uffea\016\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\062\uffea\063\uffea\064\uffea" +
    "\065\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075" +
    "\uffea\076\uffea\077\uffea\100\uffea\101\uffea\104\uffea\136\uffea" +
    "\137\uffea\001\002\000\004\134\u0136\001\002\000\004\103" +
    "\141\001\002\000\004\105\u012d\001\002\000\076\004\170" +
    "\005\176\006\200\007\172\010\165\011\163\015\160\034" +
    "\022\035\007\036\073\037\012\040\047\041\054\042\061" +
    "\071\117\072\040\073\014\074\103\075\111\076\104\077" +
    "\024\100\036\101\114\103\175\105\166\112\164\113\171" +
    "\123\174\134\u012b\137\161\001\002\000\004\134\u0129\001" +
    "\002\000\004\105\347\001\002\000\010\061\uffd4\107\uffd4" +
    "\137\uffd4\001\002\000\152\002\uffee\013\uffee\014\uffee\016" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\062\uffee" +
    "\063\uffee\064\uffee\065\uffee\070\uffee\071\uffee\072\uffee\073" +
    "\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee" +
    "\104\uffee\136\uffee\137\uffee\001\002\000\152\002\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\104\ufff2\136\ufff2\137\ufff2\001\002\000" +
    "\004\105\u0119\001\002\000\004\105\347\001\002\000\010" +
    "\061\uffce\107\uffce\137\uffce\001\002\000\152\002\ufffe\013" +
    "\ufffe\014\ufffe\016\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\070\ufffe\071" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe" +
    "\100\ufffe\101\ufffe\104\ufffe\136\ufffe\137\ufffe\001\002\000" +
    "\004\105\u010a\001\002\000\010\061\uffd0\107\uffd0\137\uffd0" +
    "\001\002\000\004\105\347\001\002\000\004\105\347\001" +
    "\002\000\152\002\ufff8\013\ufff8\014\ufff8\016\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\104\ufff8\136" +
    "\ufff8\137\ufff8\001\002\000\004\105\347\001\002\000\152" +
    "\002\ufff7\013\ufff7\014\ufff7\016\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7" +
    "\032\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076" +
    "\ufff7\077\ufff7\100\ufff7\101\ufff7\104\ufff7\136\ufff7\137\ufff7" +
    "\001\002\000\004\105\347\001\002\000\004\105\347\001" +
    "\002\000\144\002\000\013\033\014\055\016\102\020\057" +
    "\021\032\022\043\023\053\026\026\027\046\031\120\032" +
    "\045\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\043\010\044\064\045\044\046\062\047\066\050" +
    "\006\051\050\052\072\053\116\054\075\055\004\056\021" +
    "\057\106\060\060\062\105\063\115\064\027\065\107\070" +
    "\067\071\117\072\040\073\014\074\103\075\111\076\104" +
    "\077\024\100\036\101\114\136\101\137\005\001\002\000" +
    "\010\102\377\124\245\134\376\001\002\000\010\061\uffd3" +
    "\107\uffd3\137\uffd3\001\002\000\004\105\347\001\002\000" +
    "\224\002\uff91\013\uff91\014\uff91\016\uff91\020\uff91\021\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\031" +
    "\uff91\032\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\060\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91" +
    "\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\104\uff91\106" +
    "\uff91\110\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115\uff91" +
    "\116\uff91\121\uff91\122\uff91\124\uff91\125\uff91\126\uff91\127" +
    "\uff91\130\uff91\131\uff91\132\uff91\133\uff91\134\uff91\135\uff91" +
    "\136\uff91\137\uff91\001\002\000\010\061\uffd2\107\uffd2\137" +
    "\uffd2\001\002\000\152\002\ufff4\013\ufff4\014\ufff4\016\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\031\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\104" +
    "\ufff4\136\ufff4\137\ufff4\001\002\000\152\002\uffeb\013\uffeb" +
    "\014\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\104\uffeb\136\uffeb\137\uffeb\001\002\000\152" +
    "\002\uffec\013\uffec\014\uffec\016\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec" +
    "\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076" +
    "\uffec\077\uffec\100\uffec\101\uffec\104\uffec\136\uffec\137\uffec" +
    "\001\002\000\006\012\371\030\370\001\002\000\004\105" +
    "\361\001\002\000\004\105\347\001\002\000\004\105\347" +
    "\001\002\000\010\061\uffd9\107\uffd9\137\uffd9\001\002\000" +
    "\004\105\347\001\002\000\010\061\uffd8\107\uffd8\137\uffd8" +
    "\001\002\000\152\002\ufff9\013\ufff9\014\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\104\ufff9" +
    "\136\ufff9\137\ufff9\001\002\000\004\105\347\001\002\000" +
    "\152\002\uffed\013\uffed\014\uffed\016\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031" +
    "\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed" +
    "\076\uffed\077\uffed\100\uffed\101\uffed\104\uffed\136\uffed\137" +
    "\uffed\001\002\000\152\002\ufffa\013\ufffa\014\ufffa\016\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\104" +
    "\ufffa\136\ufffa\137\ufffa\001\002\000\004\105\347\001\002" +
    "\000\010\061\uffd7\107\uffd7\137\uffd7\001\002\000\010\061" +
    "\uffd1\107\uffd1\137\uffd1\001\002\000\004\105\347\001\002" +
    "\000\004\137\335\001\002\000\010\061\123\107\124\137" +
    "\122\001\002\000\014\102\304\105\317\107\157\134\uffa3" +
    "\135\320\001\002\000\004\105\314\001\002\000\004\110" +
    "\173\001\002\000\006\107\127\137\126\001\002\000\006" +
    "\105\131\135\132\001\002\000\004\110\130\001\002\000" +
    "\016\102\uff97\106\uff97\107\uff97\133\uff97\134\uff97\137\uff97" +
    "\001\002\000\036\014\055\050\006\051\050\052\072\053" +
    "\116\054\075\056\021\060\060\062\105\063\115\064\027" +
    "\065\107\106\147\137\152\001\002\000\006\066\133\067" +
    "\134\001\002\000\004\105\uffbd\001\002\000\004\105\uffbc" +
    "\001\002\000\004\105\136\001\002\000\004\106\137\001" +
    "\002\000\004\103\141\001\002\000\152\002\uffc5\013\uffc5" +
    "\014\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\104\uffc5\136\uffc5\137\uffc5\001\002\000\144" +
    "\013\033\014\055\016\102\020\057\021\032\022\043\023" +
    "\053\026\026\027\046\031\120\032\045\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\043\010\044" +
    "\064\045\044\046\062\047\066\050\006\051\050\052\072" +
    "\053\116\054\075\055\004\056\021\057\106\060\060\062" +
    "\105\063\115\064\027\065\107\070\067\071\117\072\040" +
    "\073\014\074\103\075\111\076\104\077\024\100\036\101" +
    "\114\104\142\136\101\137\005\001\002\000\156\002\uffcc" +
    "\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\104\uffcc\136\uffcc" +
    "\137\uffcc\001\002\000\144\013\033\014\055\016\102\020" +
    "\057\021\032\022\043\023\053\026\026\027\046\031\120" +
    "\032\045\034\022\035\007\036\073\037\012\040\047\041" +
    "\054\042\061\043\010\044\064\045\044\046\062\047\066" +
    "\050\006\051\050\052\072\053\116\054\075\055\004\056" +
    "\021\057\106\060\060\062\105\063\115\064\027\065\107" +
    "\070\067\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\104\144\136\101\137\005" +
    "\001\002\000\156\002\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\104\uffcd\136\uffcd\137\uffcd\001\002\000\152\002" +
    "\uffff\013\uffff\014\uffff\016\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\031\uffff\032" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\062\uffff\063\uffff\064\uffff\065\uffff\070" +
    "\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff" +
    "\077\uffff\100\uffff\101\uffff\104\uffff\136\uffff\137\uffff\001" +
    "\002\000\006\106\uffba\133\uffba\001\002\000\004\103\141" +
    "\001\002\000\004\137\302\001\002\000\006\106\276\133" +
    "\277\001\002\000\004\137\153\001\002\000\014\102\155" +
    "\106\uff9d\107\157\133\uff9d\134\uff9d\001\002\000\014\102" +
    "\274\106\uff99\107\266\133\uff99\134\uff99\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\014\102\271\106" +
    "\uff9b\107\127\133\uff9b\134\uff9b\001\002\000\076\004\170" +
    "\005\176\006\200\007\172\010\165\011\163\015\160\034" +
    "\022\035\007\036\073\037\012\040\047\041\054\042\061" +
    "\071\117\072\040\073\014\074\103\075\111\076\104\077" +
    "\024\100\036\101\114\103\175\105\166\110\173\112\164" +
    "\113\171\123\174\137\161\001\002\000\220\002\uff5c\013" +
    "\uff5c\014\uff5c\016\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c" +
    "\024\uff5c\025\uff5c\026\uff5c\027\uff5c\031\uff5c\032\uff5c\034" +
    "\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c" +
    "\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051" +
    "\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c" +
    "\060\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\070\uff5c\071" +
    "\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c" +
    "\100\uff5c\101\uff5c\104\uff5c\106\uff5c\110\uff5c\111\uff5c\112" +
    "\uff5c\113\uff5c\114\uff5c\115\uff5c\116\uff5c\121\uff5c\122\uff5c" +
    "\125\uff5c\126\uff5c\127\uff5c\130\uff5c\131\uff5c\132\uff5c\133" +
    "\uff5c\134\uff5c\135\uff5c\136\uff5c\137\uff5c\001\002\000\234" +
    "\002\uff90\013\uff90\014\uff90\016\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\031\uff90" +
    "\032\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\062\uff90\063\uff90\064\uff90\065\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\077\uff90\100\uff90\101\uff90\102\uff90\104\uff90\105\255" +
    "\106\uff90\107\257\110\uff90\111\uff90\112\uff90\113\uff90\114" +
    "\uff90\115\uff90\116\uff90\117\253\120\256\121\uff90\122\uff90" +
    "\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90\132" +
    "\uff90\133\uff90\134\uff90\135\uff90\136\uff90\137\uff90\001\002" +
    "\000\040\110\252\111\221\112\207\113\215\114\205\115" +
    "\204\116\214\121\216\122\213\125\220\126\210\127\206" +
    "\130\217\131\211\132\212\001\002\000\220\002\uff60\013" +
    "\uff60\014\uff60\016\uff60\020\uff60\021\uff60\022\uff60\023\uff60" +
    "\024\uff60\025\uff60\026\uff60\027\uff60\031\uff60\032\uff60\034" +
    "\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60" +
    "\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051" +
    "\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60" +
    "\060\uff60\062\uff60\063\uff60\064\uff60\065\uff60\070\uff60\071" +
    "\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60" +
    "\100\uff60\101\uff60\104\uff60\106\uff60\110\uff60\111\uff60\112" +
    "\uff60\113\uff60\114\uff60\115\uff60\116\uff60\121\uff60\122\uff60" +
    "\125\uff60\126\uff60\127\uff60\130\uff60\131\uff60\132\uff60\133" +
    "\uff60\134\uff60\135\uff60\136\uff60\137\uff60\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\220\002\uff5d\013" +
    "\uff5d\014\uff5d\016\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d" +
    "\024\uff5d\025\uff5d\026\uff5d\027\uff5d\031\uff5d\032\uff5d\034" +
    "\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d" +
    "\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051" +
    "\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d" +
    "\060\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\070\uff5d\071" +
    "\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d" +
    "\100\uff5d\101\uff5d\104\uff5d\106\uff5d\110\uff5d\111\uff5d\112" +
    "\uff5d\113\uff5d\114\uff5d\115\uff5d\116\uff5d\121\uff5d\122\uff5d" +
    "\125\uff5d\126\uff5d\127\uff5d\130\uff5d\131\uff5d\132\uff5d\133" +
    "\uff5d\134\uff5d\135\uff5d\136\uff5d\137\uff5d\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\222\002\uff63\013" +
    "\uff63\014\uff63\016\uff63\020\uff63\021\uff63\022\uff63\023\uff63" +
    "\024\uff63\025\uff63\026\uff63\027\uff63\031\uff63\032\uff63\034" +
    "\uff63\035\uff63\036\uff63\037\uff63\040\uff63\041\uff63\042\uff63" +
    "\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051" +
    "\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63" +
    "\060\uff63\062\uff63\063\uff63\064\uff63\065\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63" +
    "\100\uff63\101\uff63\104\uff63\106\uff63\110\uff63\111\uff63\112" +
    "\uff63\113\uff63\114\uff63\115\uff63\116\uff63\121\uff63\122\uff63" +
    "\124\245\125\uff63\126\uff63\127\uff63\130\uff63\131\uff63\132" +
    "\uff63\133\uff63\134\uff63\135\uff63\136\uff63\137\uff63\001\002" +
    "\000\220\002\uff62\013\uff62\014\uff62\016\uff62\020\uff62\021" +
    "\uff62\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62" +
    "\031\uff62\032\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040" +
    "\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62" +
    "\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055" +
    "\uff62\056\uff62\057\uff62\060\uff62\062\uff62\063\uff62\064\uff62" +
    "\065\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075" +
    "\uff62\076\uff62\077\uff62\100\uff62\101\uff62\104\uff62\106\uff62" +
    "\110\uff62\111\uff62\112\uff62\113\uff62\114\uff62\115\uff62\116" +
    "\uff62\121\uff62\122\uff62\125\uff62\126\uff62\127\uff62\130\uff62" +
    "\131\uff62\132\uff62\133\uff62\134\uff62\135\uff62\136\uff62\137" +
    "\uff62\001\002\000\074\004\170\005\176\006\200\007\172" +
    "\010\165\011\163\015\160\034\022\035\007\036\073\037" +
    "\012\040\047\041\054\042\061\071\117\072\040\073\014" +
    "\074\103\075\111\076\104\077\024\100\036\101\114\103" +
    "\175\105\166\112\164\113\171\123\174\137\161\001\002" +
    "\000\220\002\uff5e\013\uff5e\014\uff5e\016\uff5e\020\uff5e\021" +
    "\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e" +
    "\031\uff5e\032\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040" +
    "\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e" +
    "\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055" +
    "\uff5e\056\uff5e\057\uff5e\060\uff5e\062\uff5e\063\uff5e\064\uff5e" +
    "\065\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075" +
    "\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\104\uff5e\106\uff5e" +
    "\110\uff5e\111\uff5e\112\uff5e\113\uff5e\114\uff5e\115\uff5e\116" +
    "\uff5e\121\uff5e\122\uff5e\125\uff5e\126\uff5e\127\uff5e\130\uff5e" +
    "\131\uff5e\132\uff5e\133\uff5e\134\uff5e\135\uff5e\136\uff5e\137" +
    "\uff5e\001\002\000\016\102\uff96\106\uff96\107\uff96\133\uff96" +
    "\134\uff96\137\uff96\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\076\004\170\005\176\006\200\007\172" +
    "\010\165\011\163\015\160\034\022\035\007\036\073\037" +
    "\012\040\047\041\054\042\061\071\117\072\040\073\014" +
    "\074\103\075\111\076\104\077\024\100\036\101\114\103" +
    "\175\104\203\105\166\112\164\113\171\123\174\137\161" +
    "\001\002\000\220\002\uff61\013\uff61\014\uff61\016\uff61\020" +
    "\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61" +
    "\027\uff61\031\uff61\032\uff61\034\uff61\035\uff61\036\uff61\037" +
    "\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054" +
    "\uff61\055\uff61\056\uff61\057\uff61\060\uff61\062\uff61\063\uff61" +
    "\064\uff61\065\uff61\070\uff61\071\uff61\072\uff61\073\uff61\074" +
    "\uff61\075\uff61\076\uff61\077\uff61\100\uff61\101\uff61\104\uff61" +
    "\106\uff61\110\uff61\111\uff61\112\uff61\113\uff61\114\uff61\115" +
    "\uff61\116\uff61\121\uff61\122\uff61\125\uff61\126\uff61\127\uff61" +
    "\130\uff61\131\uff61\132\uff61\133\uff61\134\uff61\135\uff61\136" +
    "\uff61\137\uff61\001\002\000\220\002\uff66\013\uff66\014\uff66" +
    "\016\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025" +
    "\uff66\026\uff66\027\uff66\031\uff66\032\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66" +
    "\053\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\062" +
    "\uff66\063\uff66\064\uff66\065\uff66\070\uff66\071\uff66\072\uff66" +
    "\073\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101" +
    "\uff66\104\uff66\106\uff66\110\uff66\111\uff66\112\uff66\113\uff66" +
    "\114\uff66\115\uff66\116\uff66\121\uff66\122\uff66\125\uff66\126" +
    "\uff66\127\uff66\130\uff66\131\uff66\132\uff66\133\uff66\134\uff66" +
    "\135\uff66\136\uff66\137\uff66\001\002\000\220\002\uff5f\013" +
    "\uff5f\014\uff5f\016\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\026\uff5f\027\uff5f\031\uff5f\032\uff5f\034" +
    "\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f" +
    "\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051" +
    "\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\060\uff5f\062\uff5f\063\uff5f\064\uff5f\065\uff5f\070\uff5f\071" +
    "\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f" +
    "\100\uff5f\101\uff5f\104\uff5f\106\uff5f\110\uff5f\111\uff5f\112" +
    "\uff5f\113\uff5f\114\uff5f\115\uff5f\116\uff5f\121\uff5f\122\uff5f" +
    "\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f\132\uff5f\133" +
    "\uff5f\134\uff5f\135\uff5f\136\uff5f\137\uff5f\001\002\000\006" +
    "\104\241\133\240\001\002\000\042\104\uff58\111\221\112" +
    "\207\113\215\114\205\115\204\116\214\121\216\122\213" +
    "\125\220\126\210\127\206\130\217\131\211\132\212\133" +
    "\uff58\001\002\000\220\002\uff5a\013\uff5a\014\uff5a\016\uff5a" +
    "\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026" +
    "\uff5a\027\uff5a\031\uff5a\032\uff5a\034\uff5a\035\uff5a\036\uff5a" +
    "\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a" +
    "\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\062\uff5a\063" +
    "\uff5a\064\uff5a\065\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a" +
    "\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\104" +
    "\uff5a\106\uff5a\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a" +
    "\115\uff5a\116\uff5a\121\uff5a\122\uff5a\125\uff5a\126\uff5a\127" +
    "\uff5a\130\uff5a\131\uff5a\132\uff5a\133\uff5a\134\uff5a\135\uff5a" +
    "\136\uff5a\137\uff5a\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\074\004\170\005\176\006\200\007\172" +
    "\010\165\011\163\015\160\034\022\035\007\036\073\037" +
    "\012\040\047\041\054\042\061\071\117\072\040\073\014" +
    "\074\103\075\111\076\104\077\024\100\036\101\114\103" +
    "\175\105\166\112\164\113\171\123\174\137\161\001\002" +
    "\000\074\004\170\005\176\006\200\007\172\010\165\011" +
    "\163\015\160\034\022\035\007\036\073\037\012\040\047" +
    "\041\054\042\061\071\117\072\040\073\014\074\103\075" +
    "\111\076\104\077\024\100\036\101\114\103\175\105\166" +
    "\112\164\113\171\123\174\137\161\001\002\000\074\004" +
    "\170\005\176\006\200\007\172\010\165\011\163\015\160" +
    "\034\022\035\007\036\073\037\012\040\047\041\054\042" +
    "\061\071\117\072\040\073\014\074\103\075\111\076\104" +
    "\077\024\100\036\101\114\103\175\105\166\112\164\113" +
    "\171\123\174\137\161\001\002\000\074\004\170\005\176" +
    "\006\200\007\172\010\165\011\163\015\160\034\022\035" +
    "\007\036\073\037\012\040\047\041\054\042\061\071\117" +
    "\072\040\073\014\074\103\075\111\076\104\077\024\100" +
    "\036\101\114\103\175\105\166\112\164\113\171\123\174" +
    "\137\161\001\002\000\074\004\170\005\176\006\200\007" +
    "\172\010\165\011\163\015\160\034\022\035\007\036\073" +
    "\037\012\040\047\041\054\042\061\071\117\072\040\073" +
    "\014\074\103\075\111\076\104\077\024\100\036\101\114" +
    "\103\175\105\166\112\164\113\171\123\174\137\161\001" +
    "\002\000\074\004\170\005\176\006\200\007\172\010\165" +
    "\011\163\015\160\034\022\035\007\036\073\037\012\040" +
    "\047\041\054\042\061\071\117\072\040\073\014\074\103" +
    "\075\111\076\104\077\024\100\036\101\114\103\175\105" +
    "\166\112\164\113\171\123\174\137\161\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\074\004\170\005" +
    "\176\006\200\007\172\010\165\011\163\015\160\034\022" +
    "\035\007\036\073\037\012\040\047\041\054\042\061\071" +
    "\117\072\040\073\014\074\103\075\111\076\104\077\024" +
    "\100\036\101\114\103\175\105\166\112\164\113\171\123" +
    "\174\137\161\001\002\000\074\004\170\005\176\006\200" +
    "\007\172\010\165\011\163\015\160\034\022\035\007\036" +
    "\073\037\012\040\047\041\054\042\061\071\117\072\040" +
    "\073\014\074\103\075\111\076\104\077\024\100\036\101" +
    "\114\103\175\105\166\112\164\113\171\123\174\137\161" +
    "\001\002\000\074\004\170\005\176\006\200\007\172\010" +
    "\165\011\163\015\160\034\022\035\007\036\073\037\012" +
    "\040\047\041\054\042\061\071\117\072\040\073\014\074" +
    "\103\075\111\076\104\077\024\100\036\101\114\103\175" +
    "\105\166\112\164\113\171\123\174\137\161\001\002\000" +
    "\074\004\170\005\176\006\200\007\172\010\165\011\163" +
    "\015\160\034\022\035\007\036\073\037\012\040\047\041" +
    "\054\042\061\071\117\072\040\073\014\074\103\075\111" +
    "\076\104\077\024\100\036\101\114\103\175\105\166\112" +
    "\164\113\171\123\174\137\161\001\002\000\074\004\170" +
    "\005\176\006\200\007\172\010\165\011\163\015\160\034" +
    "\022\035\007\036\073\037\012\040\047\041\054\042\061" +
    "\071\117\072\040\073\014\074\103\075\111\076\104\077" +
    "\024\100\036\101\114\103\175\105\166\112\164\113\171" +
    "\123\174\137\161\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\220\002\uff6d\013\uff6d\014\uff6d\016\uff6d" +
    "\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026" +
    "\uff6d\027\uff6d\031\uff6d\032\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d" +
    "\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\062\uff6d\063" +
    "\uff6d\064\uff6d\065\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d" +
    "\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\104" +
    "\uff6d\106\uff6d\110\uff6d\111\uff6d\112\uff6d\113\215\114\205" +
    "\115\204\116\214\121\uff6d\122\uff6d\125\uff6d\126\uff6d\127" +
    "\uff6d\130\uff6d\131\uff6d\132\uff6d\133\uff6d\134\uff6d\135\uff6d" +
    "\136\uff6d\137\uff6d\001\002\000\220\002\uff72\013\uff72\014" +
    "\uff72\016\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\031\uff72\032\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72" +
    "\062\uff72\063\uff72\064\uff72\065\uff72\070\uff72\071\uff72\072" +
    "\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72" +
    "\101\uff72\104\uff72\106\uff72\110\uff72\111\221\112\207\113" +
    "\215\114\205\115\204\116\214\121\uff72\122\uff72\125\uff72" +
    "\126\uff72\127\uff72\130\uff72\131\uff72\132\uff72\133\uff72\134" +
    "\uff72\135\uff72\136\uff72\137\uff72\001\002\000\220\002\uff71" +
    "\013\uff71\014\uff71\016\uff71\020\uff71\021\uff71\022\uff71\023" +
    "\uff71\024\uff71\025\uff71\026\uff71\027\uff71\031\uff71\032\uff71" +
    "\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042" +
    "\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057" +
    "\uff71\060\uff71\062\uff71\063\uff71\064\uff71\065\uff71\070\uff71" +
    "\071\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077" +
    "\uff71\100\uff71\101\uff71\104\uff71\106\uff71\110\uff71\111\221" +
    "\112\207\113\215\114\205\115\204\116\214\121\uff71\122" +
    "\uff71\125\uff71\126\uff71\127\uff71\130\uff71\131\uff71\132\uff71" +
    "\133\uff71\134\uff71\135\uff71\136\uff71\137\uff71\001\002\000" +
    "\220\002\uff76\013\uff76\014\uff76\016\uff76\020\uff76\021\uff76" +
    "\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\031" +
    "\uff76\032\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047" +
    "\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76" +
    "\056\uff76\057\uff76\060\uff76\062\uff76\063\uff76\064\uff76\065" +
    "\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76" +
    "\076\uff76\077\uff76\100\uff76\101\uff76\104\uff76\106\uff76\110" +
    "\uff76\111\221\112\207\113\215\114\205\115\204\116\214" +
    "\121\uff76\122\213\125\220\126\210\127\206\130\217\131" +
    "\211\132\212\133\uff76\134\uff76\135\uff76\136\uff76\137\uff76" +
    "\001\002\000\220\002\uff6b\013\uff6b\014\uff6b\016\uff6b\020" +
    "\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b" +
    "\027\uff6b\031\uff6b\032\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054" +
    "\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\062\uff6b\063\uff6b" +
    "\064\uff6b\065\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074" +
    "\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\104\uff6b" +
    "\106\uff6b\110\uff6b\111\uff6b\112\uff6b\113\uff6b\114\uff6b\115" +
    "\204\116\uff6b\121\uff6b\122\uff6b\125\uff6b\126\uff6b\127\uff6b" +
    "\130\uff6b\131\uff6b\132\uff6b\133\uff6b\134\uff6b\135\uff6b\136" +
    "\uff6b\137\uff6b\001\002\000\220\002\uff68\013\uff68\014\uff68" +
    "\016\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025" +
    "\uff68\026\uff68\027\uff68\031\uff68\032\uff68\034\uff68\035\uff68" +
    "\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68" +
    "\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\062" +
    "\uff68\063\uff68\064\uff68\065\uff68\070\uff68\071\uff68\072\uff68" +
    "\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68\101" +
    "\uff68\104\uff68\106\uff68\110\uff68\111\uff68\112\uff68\113\uff68" +
    "\114\uff68\115\204\116\uff68\121\uff68\122\uff68\125\uff68\126" +
    "\uff68\127\uff68\130\uff68\131\uff68\132\uff68\133\uff68\134\uff68" +
    "\135\uff68\136\uff68\137\uff68\001\002\000\220\002\uff75\013" +
    "\uff75\014\uff75\016\uff75\020\uff75\021\uff75\022\uff75\023\uff75" +
    "\024\uff75\025\uff75\026\uff75\027\uff75\031\uff75\032\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\060\uff75\062\uff75\063\uff75\064\uff75\065\uff75\070\uff75\071" +
    "\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75" +
    "\100\uff75\101\uff75\104\uff75\106\uff75\110\uff75\111\221\112" +
    "\207\113\215\114\205\115\204\116\214\121\uff75\122\uff75" +
    "\125\220\126\210\127\206\130\217\131\211\132\212\133" +
    "\uff75\134\uff75\135\uff75\136\uff75\137\uff75\001\002\000\220" +
    "\002\uff6e\013\uff6e\014\uff6e\016\uff6e\020\uff6e\021\uff6e\022" +
    "\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\031\uff6e" +
    "\032\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\uff6e\060\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e" +
    "\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\101\uff6e\104\uff6e\106\uff6e\110\uff6e" +
    "\111\221\112\207\113\215\114\205\115\204\116\214\121" +
    "\uff6e\122\uff6e\125\uff6e\126\uff6e\127\uff6e\130\uff6e\131\uff6e" +
    "\132\uff6e\133\uff6e\134\uff6e\135\uff6e\136\uff6e\137\uff6e\001" +
    "\002\000\220\002\uff6f\013\uff6f\014\uff6f\016\uff6f\020\uff6f" +
    "\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027" +
    "\uff6f\031\uff6f\032\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f" +
    "\055\uff6f\056\uff6f\057\uff6f\060\uff6f\062\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f" +
    "\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\104\uff6f\106" +
    "\uff6f\110\uff6f\111\221\112\207\113\215\114\205\115\204" +
    "\116\214\121\uff6f\122\uff6f\125\uff6f\126\uff6f\127\uff6f\130" +
    "\uff6f\131\uff6f\132\uff6f\133\uff6f\134\uff6f\135\uff6f\136\uff6f" +
    "\137\uff6f\001\002\000\220\002\uff73\013\uff73\014\uff73\016" +
    "\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\031\uff73\032\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053" +
    "\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\062\uff73" +
    "\063\uff73\064\uff73\065\uff73\070\uff73\071\uff73\072\uff73\073" +
    "\uff73\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73" +
    "\104\uff73\106\uff73\110\uff73\111\221\112\207\113\215\114" +
    "\205\115\204\116\214\121\uff73\122\uff73\125\uff73\126\uff73" +
    "\127\uff73\130\uff73\131\uff73\132\uff73\133\uff73\134\uff73\135" +
    "\uff73\136\uff73\137\uff73\001\002\000\220\002\uff6c\013\uff6c" +
    "\014\uff6c\016\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024" +
    "\uff6c\025\uff6c\026\uff6c\027\uff6c\031\uff6c\032\uff6c\034\uff6c" +
    "\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c" +
    "\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060" +
    "\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\070\uff6c\071\uff6c" +
    "\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100" +
    "\uff6c\101\uff6c\104\uff6c\106\uff6c\110\uff6c\111\uff6c\112\uff6c" +
    "\113\215\114\205\115\204\116\214\121\uff6c\122\uff6c\125" +
    "\uff6c\126\uff6c\127\uff6c\130\uff6c\131\uff6c\132\uff6c\133\uff6c" +
    "\134\uff6c\135\uff6c\136\uff6c\137\uff6c\001\002\000\220\002" +
    "\uff70\013\uff70\014\uff70\016\uff70\020\uff70\021\uff70\022\uff70" +
    "\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\031\uff70\032" +
    "\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70" +
    "\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050" +
    "\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70" +
    "\057\uff70\060\uff70\062\uff70\063\uff70\064\uff70\065\uff70\070" +
    "\uff70\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70" +
    "\077\uff70\100\uff70\101\uff70\104\uff70\106\uff70\110\uff70\111" +
    "\221\112\207\113\215\114\205\115\204\116\214\121\uff70" +
    "\122\uff70\125\uff70\126\uff70\127\uff70\130\uff70\131\uff70\132" +
    "\uff70\133\uff70\134\uff70\135\uff70\136\uff70\137\uff70\001\002" +
    "\000\220\002\uff6a\013\uff6a\014\uff6a\016\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\031\uff6a\032\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040" +
    "\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a" +
    "\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\060\uff6a\062\uff6a\063\uff6a\064\uff6a" +
    "\065\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075" +
    "\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\104\uff6a\106\uff6a" +
    "\110\uff6a\111\uff6a\112\uff6a\113\uff6a\114\uff6a\115\204\116" +
    "\uff6a\121\uff6a\122\uff6a\125\uff6a\126\uff6a\127\uff6a\130\uff6a" +
    "\131\uff6a\132\uff6a\133\uff6a\134\uff6a\135\uff6a\136\uff6a\137" +
    "\uff6a\001\002\000\220\002\uff69\013\uff69\014\uff69\016\uff69" +
    "\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026" +
    "\uff69\027\uff69\031\uff69\032\uff69\034\uff69\035\uff69\036\uff69" +
    "\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69" +
    "\054\uff69\055\uff69\056\uff69\057\uff69\060\uff69\062\uff69\063" +
    "\uff69\064\uff69\065\uff69\070\uff69\071\uff69\072\uff69\073\uff69" +
    "\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69\104" +
    "\uff69\106\uff69\110\uff69\111\uff69\112\uff69\113\uff69\114\uff69" +
    "\115\uff69\116\uff69\121\uff69\122\uff69\125\uff69\126\uff69\127" +
    "\uff69\130\uff69\131\uff69\132\uff69\133\uff69\134\uff69\135\uff69" +
    "\136\uff69\137\uff69\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\220\002\uff5b\013\uff5b\014\uff5b\016\uff5b" +
    "\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026" +
    "\uff5b\027\uff5b\031\uff5b\032\uff5b\034\uff5b\035\uff5b\036\uff5b" +
    "\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045" +
    "\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b" +
    "\054\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\065\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b" +
    "\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b\104" +
    "\uff5b\106\uff5b\110\uff5b\111\uff5b\112\uff5b\113\uff5b\114\uff5b" +
    "\115\uff5b\116\uff5b\121\uff5b\122\uff5b\125\uff5b\126\uff5b\127" +
    "\uff5b\130\uff5b\131\uff5b\132\uff5b\133\uff5b\134\uff5b\135\uff5b" +
    "\136\uff5b\137\uff5b\001\002\000\042\104\uff59\111\221\112" +
    "\207\113\215\114\205\115\204\116\214\121\216\122\213" +
    "\125\220\126\210\127\206\130\217\131\211\132\212\133" +
    "\uff59\001\002\000\220\002\uff74\013\uff74\014\uff74\016\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\031\uff74\032\uff74\034\uff74\035\uff74\036\uff74" +
    "\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045" +
    "\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74" +
    "\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\062\uff74\063" +
    "\uff74\064\uff74\065\uff74\070\uff74\071\uff74\072\uff74\073\uff74" +
    "\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\104" +
    "\uff74\106\uff74\110\uff74\111\221\112\207\113\215\114\205" +
    "\115\204\116\214\121\uff74\122\uff74\125\220\126\210\127" +
    "\206\130\217\131\211\132\212\133\uff74\134\uff74\135\uff74" +
    "\136\uff74\137\uff74\001\002\000\220\002\uff64\013\uff64\014" +
    "\uff64\016\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64" +
    "\025\uff64\026\uff64\027\uff64\031\uff64\032\uff64\034\uff64\035" +
    "\uff64\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64" +
    "\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052" +
    "\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64" +
    "\062\uff64\063\uff64\064\uff64\065\uff64\070\uff64\071\uff64\072" +
    "\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64" +
    "\101\uff64\104\uff64\106\uff64\110\uff64\111\uff64\112\uff64\113" +
    "\uff64\114\uff64\115\uff64\116\uff64\121\uff64\122\uff64\125\uff64" +
    "\126\uff64\127\uff64\130\uff64\131\uff64\132\uff64\133\uff64\134" +
    "\uff64\135\uff64\136\uff64\137\uff64\001\002\000\044\034\022" +
    "\035\007\036\073\037\012\040\047\041\054\042\061\071" +
    "\117\072\040\073\014\074\103\075\111\076\104\077\024" +
    "\100\036\101\114\137\161\001\002\000\224\002\uff92\013" +
    "\uff92\014\uff92\016\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\031\uff92\032\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\062\uff92\063\uff92\064\uff92\065\uff92\070\uff92\071" +
    "\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92" +
    "\100\uff92\101\uff92\102\uff92\104\uff92\106\uff92\110\uff92\111" +
    "\uff92\112\uff92\113\uff92\114\uff92\115\uff92\116\uff92\121\uff92" +
    "\122\uff92\124\uff92\125\uff92\126\uff92\127\uff92\130\uff92\131" +
    "\uff92\132\uff92\133\uff92\134\uff92\135\uff92\136\uff92\137\uff92" +
    "\001\002\000\040\106\250\111\221\112\207\113\215\114" +
    "\205\115\204\116\214\121\216\122\213\125\220\126\210" +
    "\127\206\130\217\131\211\132\212\001\002\000\220\002" +
    "\uff67\013\uff67\014\uff67\016\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\031\uff67\032" +
    "\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67" +
    "\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67" +
    "\057\uff67\060\uff67\062\uff67\063\uff67\064\uff67\065\uff67\070" +
    "\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67" +
    "\077\uff67\100\uff67\101\uff67\104\uff67\106\uff67\110\uff67\111" +
    "\uff67\112\uff67\113\uff67\114\uff67\115\uff67\116\uff67\121\uff67" +
    "\122\uff67\125\uff67\126\uff67\127\uff67\130\uff67\131\uff67\132" +
    "\uff67\133\uff67\134\uff67\135\uff67\136\uff67\137\uff67\001\002" +
    "\000\220\002\uff65\013\uff65\014\uff65\016\uff65\020\uff65\021" +
    "\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65" +
    "\031\uff65\032\uff65\034\uff65\035\uff65\036\uff65\037\uff65\040" +
    "\uff65\041\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65" +
    "\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055" +
    "\uff65\056\uff65\057\uff65\060\uff65\062\uff65\063\uff65\064\uff65" +
    "\065\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074\uff65\075" +
    "\uff65\076\uff65\077\uff65\100\uff65\101\uff65\104\uff65\106\uff65" +
    "\110\uff65\111\uff65\112\uff65\113\uff65\114\uff65\115\uff65\116" +
    "\uff65\121\uff65\122\uff65\125\uff65\126\uff65\127\uff65\130\uff65" +
    "\131\uff65\132\uff65\133\uff65\134\uff65\135\uff65\136\uff65\137" +
    "\uff65\001\002\000\226\002\uff94\013\uff94\014\uff94\016\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\031\uff94\032\uff94\034\uff94\035\uff94\036\uff94" +
    "\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\062\uff94\063" +
    "\uff94\064\uff94\065\uff94\070\uff94\071\uff94\072\uff94\073\uff94" +
    "\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102" +
    "\uff94\104\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94" +
    "\113\uff94\114\uff94\115\uff94\116\uff94\121\uff94\122\uff94\124" +
    "\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132\uff94" +
    "\133\uff94\134\uff94\135\uff94\136\uff94\137\uff94\001\002\000" +
    "\224\002\uff8d\013\uff8d\014\uff8d\016\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\031" +
    "\uff8d\032\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\062\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\104\uff8d\106" +
    "\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d" +
    "\116\uff8d\121\uff8d\122\uff8d\124\uff8d\125\uff8d\126\uff8d\127" +
    "\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\134\uff8d\135\uff8d" +
    "\136\uff8d\137\uff8d\001\002\000\226\002\uff8e\013\uff8e\014" +
    "\uff8e\016\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\031\uff8e\032\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\070\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\104\uff8e\106\uff8e\107\266\110\uff8e\111" +
    "\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\121\uff8e" +
    "\122\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e\131" +
    "\uff8e\132\uff8e\133\uff8e\134\uff8e\135\uff8e\136\uff8e\137\uff8e" +
    "\001\002\000\076\004\170\005\176\006\200\007\172\010" +
    "\165\011\163\015\160\034\022\035\007\036\073\037\012" +
    "\040\047\041\054\042\061\071\117\072\040\073\014\074" +
    "\103\075\111\076\104\077\024\100\036\101\114\103\175" +
    "\105\166\106\261\112\164\113\171\123\174\137\161\001" +
    "\002\000\224\002\uff8c\013\uff8c\014\uff8c\016\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\031\uff8c\032\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\104" +
    "\uff8c\106\uff8c\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c" +
    "\115\uff8c\116\uff8c\121\uff8c\122\uff8c\124\uff8c\125\uff8c\126" +
    "\uff8c\127\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c\134\uff8c" +
    "\135\uff8c\136\uff8c\137\uff8c\001\002\000\074\004\170\005" +
    "\176\006\200\007\172\010\165\011\163\015\160\034\022" +
    "\035\007\036\073\037\012\040\047\041\054\042\061\071" +
    "\117\072\040\073\014\074\103\075\111\076\104\077\024" +
    "\100\036\101\114\103\175\105\166\112\164\113\171\123" +
    "\174\137\161\001\002\000\042\106\uffa4\111\221\112\207" +
    "\113\215\114\205\115\204\116\214\121\216\122\213\125" +
    "\220\126\210\127\206\130\217\131\211\132\212\133\uffa4" +
    "\001\002\000\224\002\uff8b\013\uff8b\014\uff8b\016\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\062\uff8b\063\uff8b" +
    "\064\uff8b\065\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\104\uff8b\106\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114" +
    "\uff8b\115\uff8b\116\uff8b\121\uff8b\122\uff8b\124\uff8b\125\uff8b" +
    "\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b\133\uff8b\134" +
    "\uff8b\135\uff8b\136\uff8b\137\uff8b\001\002\000\006\106\263" +
    "\133\264\001\002\000\224\002\uff8a\013\uff8a\014\uff8a\016" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\031\uff8a\032\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\070\uff8a\071\uff8a\072\uff8a\073" +
    "\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a" +
    "\102\uff8a\104\uff8a\106\uff8a\110\uff8a\111\uff8a\112\uff8a\113" +
    "\uff8a\114\uff8a\115\uff8a\116\uff8a\121\uff8a\122\uff8a\124\uff8a" +
    "\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a\133" +
    "\uff8a\134\uff8a\135\uff8a\136\uff8a\137\uff8a\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\042\106\uffa5\111" +
    "\221\112\207\113\215\114\205\115\204\116\214\121\216" +
    "\122\213\125\220\126\210\127\206\130\217\131\211\132" +
    "\212\133\uffa5\001\002\000\074\004\170\005\176\006\200" +
    "\007\172\010\165\011\163\015\160\034\022\035\007\036" +
    "\073\037\012\040\047\041\054\042\061\071\117\072\040" +
    "\073\014\074\103\075\111\076\104\077\024\100\036\101" +
    "\114\103\175\105\166\112\164\113\171\123\174\137\161" +
    "\001\002\000\040\110\270\111\221\112\207\113\215\114" +
    "\205\115\204\116\214\121\216\122\213\125\220\126\210" +
    "\127\206\130\217\131\211\132\212\001\002\000\226\002" +
    "\uff95\013\uff95\014\uff95\016\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\031\uff95\032" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95" +
    "\057\uff95\060\uff95\062\uff95\063\uff95\064\uff95\065\uff95\070" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95" +
    "\077\uff95\100\uff95\101\uff95\102\uff95\104\uff95\106\uff95\107" +
    "\uff95\110\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95" +
    "\116\uff95\121\uff95\122\uff95\124\uff95\125\uff95\126\uff95\127" +
    "\uff95\130\uff95\131\uff95\132\uff95\133\uff95\134\uff95\135\uff95" +
    "\136\uff95\137\uff95\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\044\106\uff9a\111\221\112\207\113\215" +
    "\114\205\115\204\116\214\121\216\122\213\125\220\126" +
    "\210\127\206\130\217\131\211\132\212\133\uff9a\134\uff9a" +
    "\001\002\000\044\106\uff9c\111\221\112\207\113\215\114" +
    "\205\115\204\116\214\121\216\122\213\125\220\126\210" +
    "\127\206\130\217\131\211\132\212\133\uff9c\134\uff9c\001" +
    "\002\000\074\004\170\005\176\006\200\007\172\010\165" +
    "\011\163\015\160\034\022\035\007\036\073\037\012\040" +
    "\047\041\054\042\061\071\117\072\040\073\014\074\103" +
    "\075\111\076\104\077\024\100\036\101\114\103\175\105" +
    "\166\112\164\113\171\123\174\137\161\001\002\000\044" +
    "\106\uff98\111\221\112\207\113\215\114\205\115\204\116" +
    "\214\121\216\122\213\125\220\126\210\127\206\130\217" +
    "\131\211\132\212\133\uff98\134\uff98\001\002\000\004\103" +
    "\141\001\002\000\034\014\055\050\006\051\050\052\072" +
    "\053\116\054\075\056\021\060\060\062\105\063\115\064" +
    "\027\065\107\137\152\001\002\000\006\106\uffbb\133\uffbb" +
    "\001\002\000\152\002\uffc7\013\uffc7\014\uffc7\016\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\104\uffc7" +
    "\136\uffc7\137\uffc7\001\002\000\014\102\304\106\uffa3\107" +
    "\157\133\uffa3\134\uffa3\001\002\000\014\102\311\106\uff9f" +
    "\107\266\133\uff9f\134\uff9f\001\002\000\074\004\170\005" +
    "\176\006\200\007\172\010\165\011\163\015\160\034\022" +
    "\035\007\036\073\037\012\040\047\041\054\042\061\071" +
    "\117\072\040\073\014\074\103\075\111\076\104\077\024" +
    "\100\036\101\114\103\175\105\166\112\164\113\171\123" +
    "\174\137\161\001\002\000\014\102\306\106\uffa1\107\127" +
    "\133\uffa1\134\uffa1\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\044\106\uffa0\111\221\112\207\113\215" +
    "\114\205\115\204\116\214\121\216\122\213\125\220\126" +
    "\210\127\206\130\217\131\211\132\212\133\uffa0\134\uffa0" +
    "\001\002\000\044\106\uffa2\111\221\112\207\113\215\114" +
    "\205\115\204\116\214\121\216\122\213\125\220\126\210" +
    "\127\206\130\217\131\211\132\212\133\uffa2\134\uffa2\001" +
    "\002\000\074\004\170\005\176\006\200\007\172\010\165" +
    "\011\163\015\160\034\022\035\007\036\073\037\012\040" +
    "\047\041\054\042\061\071\117\072\040\073\014\074\103" +
    "\075\111\076\104\077\024\100\036\101\114\103\175\105" +
    "\166\112\164\113\171\123\174\137\161\001\002\000\044" +
    "\106\uff9e\111\221\112\207\113\215\114\205\115\204\116" +
    "\214\121\216\122\213\125\220\126\210\127\206\130\217" +
    "\131\211\132\212\133\uff9e\134\uff9e\001\002\000\152\002" +
    "\uffc6\013\uffc6\014\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\104\uffc6\136\uffc6\137\uffc6\001" +
    "\002\000\004\106\315\001\002\000\004\103\141\001\002" +
    "\000\152\002\uffbe\013\uffbe\014\uffbe\016\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\104\uffbe\136\uffbe" +
    "\137\uffbe\001\002\000\036\014\055\050\006\051\050\052" +
    "\072\053\116\054\075\056\021\060\060\062\105\063\115" +
    "\064\027\065\107\106\330\137\152\001\002\000\006\066" +
    "\133\067\134\001\002\000\004\105\322\001\002\000\036" +
    "\014\055\050\006\051\050\052\072\053\116\054\075\056" +
    "\021\060\060\062\105\063\115\064\027\065\107\106\323" +
    "\137\152\001\002\000\004\103\141\001\002\000\006\106" +
    "\325\133\277\001\002\000\004\103\141\001\002\000\152" +
    "\002\uffc8\013\uffc8\014\uffc8\016\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8" +
    "\032\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\100\uffc8\101\uffc8\104\uffc8\136\uffc8\137\uffc8" +
    "\001\002\000\152\002\uffc9\013\uffc9\014\uffc9\016\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\104\uffc9" +
    "\136\uffc9\137\uffc9\001\002\000\004\103\141\001\002\000" +
    "\006\106\332\133\277\001\002\000\004\103\141\001\002" +
    "\000\152\002\uffcb\013\uffcb\014\uffcb\016\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\031\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\104\uffcb\136\uffcb" +
    "\137\uffcb\001\002\000\152\002\uffca\013\uffca\014\uffca\016" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\104\uffca\136\uffca\137\uffca\001\002\000\004\103\336\001" +
    "\002\000\034\014\055\050\006\051\050\052\072\053\116" +
    "\054\075\056\021\060\060\062\105\063\115\064\027\065" +
    "\107\137\152\001\002\000\036\014\055\050\006\051\050" +
    "\052\072\053\116\054\075\056\021\060\060\062\105\063" +
    "\115\064\027\065\107\104\342\137\152\001\002\000\004" +
    "\134\341\001\002\000\036\014\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\056\uffda\060\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\104\uffda\137\uffda\001\002\000\004\134" +
    "\345\001\002\000\004\134\344\001\002\000\036\014\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb\060" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\104\uffdb\137\uffdb" +
    "\001\002\000\152\002\uffdc\013\uffdc\014\uffdc\016\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\104\uffdc" +
    "\136\uffdc\137\uffdc\001\002\000\224\002\uff7f\013\uff7f\014" +
    "\uff7f\016\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\031\uff7f\032\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052" +
    "\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\065\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\102\uff7f\104\uff7f\106\uff7f\110\uff7f\111\uff7f\112" +
    "\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f\121\uff7f\122\uff7f" +
    "\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f\132" +
    "\uff7f\133\uff7f\134\uff7f\135\uff7f\136\uff7f\137\uff7f\001\002" +
    "\000\076\004\170\005\176\006\200\007\172\010\165\011" +
    "\163\015\160\034\022\035\007\036\073\037\012\040\047" +
    "\041\054\042\061\071\117\072\040\073\014\074\103\075" +
    "\111\076\104\077\024\100\036\101\114\103\175\105\166" +
    "\106\350\112\164\113\171\123\174\137\161\001\002\000" +
    "\224\002\uff87\013\uff87\014\uff87\016\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\031" +
    "\uff87\032\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87" +
    "\056\uff87\057\uff87\060\uff87\062\uff87\063\uff87\064\uff87\065" +
    "\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87" +
    "\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\104\uff87\106" +
    "\uff87\110\uff87\111\uff87\112\uff87\113\uff87\114\uff87\115\uff87" +
    "\116\uff87\121\uff87\122\uff87\124\uff87\125\uff87\126\uff87\127" +
    "\uff87\130\uff87\131\uff87\132\uff87\133\uff87\134\uff87\135\uff87" +
    "\136\uff87\137\uff87\001\002\000\006\106\352\133\264\001" +
    "\002\000\224\002\uff88\013\uff88\014\uff88\016\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\031\uff88\032\uff88\034\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\057\uff88\060\uff88\062\uff88\063\uff88\064" +
    "\uff88\065\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\104" +
    "\uff88\106\uff88\110\uff88\111\uff88\112\uff88\113\uff88\114\uff88" +
    "\115\uff88\116\uff88\121\uff88\122\uff88\124\uff88\125\uff88\126" +
    "\uff88\127\uff88\130\uff88\131\uff88\132\uff88\133\uff88\134\uff88" +
    "\135\uff88\136\uff88\137\uff88\001\002\000\224\002\uff77\013" +
    "\uff77\014\uff77\016\uff77\020\uff77\021\uff77\022\uff77\023\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\031\uff77\032\uff77\034" +
    "\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77" +
    "\060\uff77\062\uff77\063\uff77\064\uff77\065\uff77\070\uff77\071" +
    "\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77" +
    "\100\uff77\101\uff77\102\uff77\104\uff77\106\uff77\110\uff77\111" +
    "\uff77\112\uff77\113\uff77\114\uff77\115\uff77\116\uff77\121\uff77" +
    "\122\uff77\124\uff77\125\uff77\126\uff77\127\uff77\130\uff77\131" +
    "\uff77\132\uff77\133\uff77\134\uff77\135\uff77\136\uff77\137\uff77" +
    "\001\002\000\224\002\uff7b\013\uff7b\014\uff7b\016\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\031\uff7b\032\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\062\uff7b\063\uff7b" +
    "\064\uff7b\065\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074" +
    "\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b" +
    "\104\uff7b\106\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b\114" +
    "\uff7b\115\uff7b\116\uff7b\121\uff7b\122\uff7b\124\uff7b\125\uff7b" +
    "\126\uff7b\127\uff7b\130\uff7b\131\uff7b\132\uff7b\133\uff7b\134" +
    "\uff7b\135\uff7b\136\uff7b\137\uff7b\001\002\000\004\134\356" +
    "\001\002\000\152\002\uffe5\013\uffe5\014\uffe5\016\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\104\uffe5" +
    "\136\uffe5\137\uffe5\001\002\000\224\002\uff7a\013\uff7a\014" +
    "\uff7a\016\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a" +
    "\025\uff7a\026\uff7a\027\uff7a\031\uff7a\032\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a" +
    "\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\062\uff7a\063\uff7a\064\uff7a\065\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a" +
    "\101\uff7a\102\uff7a\104\uff7a\106\uff7a\110\uff7a\111\uff7a\112" +
    "\uff7a\113\uff7a\114\uff7a\115\uff7a\116\uff7a\121\uff7a\122\uff7a" +
    "\124\uff7a\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131\uff7a\132" +
    "\uff7a\133\uff7a\134\uff7a\135\uff7a\136\uff7a\137\uff7a\001\002" +
    "\000\224\002\uff7c\013\uff7c\014\uff7c\016\uff7c\020\uff7c\021" +
    "\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c" +
    "\031\uff7c\032\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\062\uff7c\063\uff7c\064\uff7c" +
    "\065\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075" +
    "\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\104\uff7c" +
    "\106\uff7c\110\uff7c\111\uff7c\112\uff7c\113\uff7c\114\uff7c\115" +
    "\uff7c\116\uff7c\121\uff7c\122\uff7c\124\uff7c\125\uff7c\126\uff7c" +
    "\127\uff7c\130\uff7c\131\uff7c\132\uff7c\133\uff7c\134\uff7c\135" +
    "\uff7c\136\uff7c\137\uff7c\001\002\000\074\004\170\005\176" +
    "\006\200\007\172\010\165\011\163\015\160\034\022\035" +
    "\007\036\073\037\012\040\047\041\054\042\061\071\117" +
    "\072\040\073\014\074\103\075\111\076\104\077\024\100" +
    "\036\101\114\103\175\105\166\112\164\113\171\123\174" +
    "\137\161\001\002\000\040\106\363\111\221\112\207\113" +
    "\215\114\205\115\204\116\214\121\216\122\213\125\220" +
    "\126\210\127\206\130\217\131\211\132\212\001\002\000" +
    "\004\103\141\001\002\000\154\002\uffb0\013\uffb0\014\uffb0" +
    "\016\uffb0\017\365\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\070\uffb0\071\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\101\uffb0\104\uffb0\136\uffb0\137\uffb0\001\002\000\006" +
    "\016\102\103\141\001\002\000\152\002\uffaf\013\uffaf\014" +
    "\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\101\uffaf\104\uffaf\136\uffaf\137\uffaf\001\002\000\152\002" +
    "\uffae\013\uffae\014\uffae\016\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\032" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\062\uffae\063\uffae\064\uffae\065\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae" +
    "\077\uffae\100\uffae\101\uffae\104\uffae\136\uffae\137\uffae\001" +
    "\002\000\004\137\373\001\002\000\074\004\170\005\176" +
    "\006\200\007\172\010\165\011\163\015\160\034\022\035" +
    "\007\036\073\037\012\040\047\041\054\042\061\071\117" +
    "\072\040\073\014\074\103\075\111\076\104\077\024\100" +
    "\036\101\114\103\175\105\166\112\164\113\171\123\174" +
    "\137\161\001\002\000\206\002\uffe3\013\uffe3\014\uffe3\016" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\104\uffe3\111\221\112\207\113\215\114\205\115\204\116" +
    "\214\121\216\122\213\125\220\126\210\127\206\130\217" +
    "\131\211\132\212\136\uffe3\137\uffe3\001\002\000\074\004" +
    "\170\005\176\006\200\007\172\010\165\011\163\015\160" +
    "\034\022\035\007\036\073\037\012\040\047\041\054\042" +
    "\061\071\117\072\040\073\014\074\103\075\111\076\104" +
    "\077\024\100\036\101\114\103\175\105\166\112\164\113" +
    "\171\123\174\137\161\001\002\000\206\002\uffe2\013\uffe2" +
    "\014\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\104\uffe2\111\221\112\207\113\215\114\205" +
    "\115\204\116\214\121\216\122\213\125\220\126\210\127" +
    "\206\130\217\131\211\132\212\136\uffe2\137\uffe2\001\002" +
    "\000\224\002\uff84\013\uff84\014\uff84\016\uff84\020\uff84\021" +
    "\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\031\uff84\032\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\056\uff84\057\uff84\060\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075" +
    "\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84\104\uff84" +
    "\106\uff84\110\uff84\111\uff84\112\uff84\113\uff84\114\uff84\115" +
    "\uff84\116\uff84\121\uff84\122\uff84\124\uff84\125\uff84\126\uff84" +
    "\127\uff84\130\uff84\131\uff84\132\uff84\133\uff84\134\uff84\135" +
    "\uff84\136\uff84\137\uff84\001\002\000\152\002\ufffb\013\ufffb" +
    "\014\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\104\ufffb\136\ufffb\137\ufffb\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\042\106\uff93\111" +
    "\221\112\207\113\215\114\205\115\204\116\214\121\216" +
    "\122\213\125\220\126\210\127\206\130\217\131\211\132" +
    "\212\134\uff93\001\002\000\004\134\u0102\001\002\000\152" +
    "\002\uffe6\013\uffe6\014\uffe6\016\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6" +
    "\032\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\101\uffe6\104\uffe6\136\uffe6\137\uffe6" +
    "\001\002\000\004\134\u0104\001\002\000\152\002\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\104\uffdd\136\uffdd\137\uffdd\001\002\000" +
    "\004\134\u0106\001\002\000\152\002\uffdf\013\uffdf\014\uffdf" +
    "\016\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\104\uffdf\136\uffdf\137\uffdf\001\002\000\004\134\u0108" +
    "\001\002\000\152\002\uffe0\013\uffe0\014\uffe0\016\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\104\uffe0" +
    "\136\uffe0\137\uffe0\001\002\000\224\002\uff80\013\uff80\014" +
    "\uff80\016\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\031\uff80\032\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\062\uff80\063\uff80\064\uff80\065\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80" +
    "\101\uff80\102\uff80\104\uff80\106\uff80\110\uff80\111\uff80\112" +
    "\uff80\113\uff80\114\uff80\115\uff80\116\uff80\121\uff80\122\uff80" +
    "\124\uff80\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80\132" +
    "\uff80\133\uff80\134\uff80\135\uff80\136\uff80\137\uff80\001\002" +
    "\000\074\014\055\034\022\035\007\036\073\037\012\040" +
    "\047\041\054\042\061\050\006\051\050\052\072\053\116" +
    "\054\075\056\021\060\060\062\105\063\115\064\027\065" +
    "\107\071\117\072\040\073\014\074\103\075\111\076\104" +
    "\077\024\100\036\101\114\137\u010b\001\002\000\020\102" +
    "\uff90\105\255\107\257\117\253\120\256\124\uff90\137\153" +
    "\001\002\000\004\134\u0110\001\002\000\006\102\377\124" +
    "\245\001\002\000\004\134\uffa9\001\002\000\004\134\uffaa" +
    "\001\002\000\074\004\170\005\176\006\200\007\172\010" +
    "\165\011\163\015\160\034\022\035\007\036\073\037\012" +
    "\040\047\041\054\042\061\071\117\072\040\073\014\074" +
    "\103\075\111\076\104\077\024\100\036\101\114\103\175" +
    "\105\166\112\164\113\171\123\174\137\161\001\002\000" +
    "\040\111\221\112\207\113\215\114\205\115\204\116\214" +
    "\121\216\122\213\125\220\126\210\127\206\130\217\131" +
    "\211\132\212\134\u0112\001\002\000\044\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\137\161\001\002\000\010\102\377\106\uffa7\124" +
    "\245\001\002\000\004\106\uffa8\001\002\000\004\106\u0116" +
    "\001\002\000\004\103\141\001\002\000\152\002\uffab\013" +
    "\uffab\014\uffab\016\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\031\uffab\032\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\062\uffab\063\uffab\064\uffab\065\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\100\uffab\101\uffab\104\uffab\136\uffab\137\uffab\001\002\000" +
    "\224\002\uff81\013\uff81\014\uff81\016\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\031" +
    "\uff81\032\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\057\uff81\060\uff81\062\uff81\063\uff81\064\uff81\065" +
    "\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81" +
    "\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81\104\uff81\106" +
    "\uff81\110\uff81\111\uff81\112\uff81\113\uff81\114\uff81\115\uff81" +
    "\116\uff81\121\uff81\122\uff81\124\uff81\125\uff81\126\uff81\127" +
    "\uff81\130\uff81\131\uff81\132\uff81\133\uff81\134\uff81\135\uff81" +
    "\136\uff81\137\uff81\001\002\000\074\004\170\005\176\006" +
    "\200\007\172\010\165\011\163\015\160\034\022\035\007" +
    "\036\073\037\012\040\047\041\054\042\061\071\117\072" +
    "\040\073\014\074\103\075\111\076\104\077\024\100\036" +
    "\101\114\103\175\105\166\112\164\113\171\123\174\137" +
    "\161\001\002\000\040\106\u011b\111\221\112\207\113\215" +
    "\114\205\115\204\116\214\121\216\122\213\125\220\126" +
    "\210\127\206\130\217\131\211\132\212\001\002\000\004" +
    "\103\u011c\001\002\000\006\024\u011d\025\u011f\001\002\000" +
    "\074\004\170\005\176\006\200\007\172\010\165\011\163" +
    "\015\160\034\022\035\007\036\073\037\012\040\047\041" +
    "\054\042\061\071\117\072\040\073\014\074\103\075\111" +
    "\076\104\077\024\100\036\101\114\103\175\105\166\112" +
    "\164\113\171\123\174\137\161\001\002\000\010\024\uffb3" +
    "\025\uffb3\104\uffb3\001\002\000\004\135\u0123\001\002\000" +
    "\010\024\u011d\025\u011f\104\u0122\001\002\000\010\024\uffb4" +
    "\025\uffb4\104\uffb4\001\002\000\152\002\uffb5\013\uffb5\014" +
    "\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\104\uffb5\136\uffb5\137\uffb5\001\002\000\142\013" +
    "\033\014\055\016\102\020\057\021\032\022\043\023\053" +
    "\026\026\027\046\031\120\032\045\034\022\035\007\036" +
    "\073\037\012\040\047\041\054\042\061\043\010\044\064" +
    "\045\044\046\062\047\066\050\006\051\050\052\072\053" +
    "\116\054\075\055\004\056\021\057\106\060\060\062\105" +
    "\063\115\064\027\065\107\070\067\071\117\072\040\073" +
    "\014\074\103\075\111\076\104\077\024\100\036\101\114" +
    "\136\101\137\005\001\002\000\150\013\033\014\055\016" +
    "\102\020\057\021\032\022\043\023\053\024\uffb1\025\uffb1" +
    "\026\026\027\046\031\120\032\045\034\022\035\007\036" +
    "\073\037\012\040\047\041\054\042\061\043\010\044\064" +
    "\045\044\046\062\047\066\050\006\051\050\052\072\053" +
    "\116\054\075\055\004\056\021\057\106\060\060\062\105" +
    "\063\115\064\027\065\107\070\067\071\117\072\040\073" +
    "\014\074\103\075\111\076\104\077\024\100\036\101\114" +
    "\104\uffb1\136\101\137\005\001\002\000\040\111\221\112" +
    "\207\113\215\114\205\115\204\116\214\121\216\122\213" +
    "\125\220\126\210\127\206\130\217\131\211\132\212\135" +
    "\u0126\001\002\000\142\013\033\014\055\016\102\020\057" +
    "\021\032\022\043\023\053\026\026\027\046\031\120\032" +
    "\045\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\043\010\044\064\045\044\046\062\047\066\050" +
    "\006\051\050\052\072\053\116\054\075\055\004\056\021" +
    "\057\106\060\060\062\105\063\115\064\027\065\107\070" +
    "\067\071\117\072\040\073\014\074\103\075\111\076\104" +
    "\077\024\100\036\101\114\136\101\137\005\001\002\000" +
    "\150\013\033\014\055\016\102\020\057\021\032\022\043" +
    "\023\053\024\uffb2\025\uffb2\026\026\027\046\031\120\032" +
    "\045\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\043\010\044\064\045\044\046\062\047\066\050" +
    "\006\051\050\052\072\053\116\054\075\055\004\056\021" +
    "\057\106\060\060\062\105\063\115\064\027\065\107\070" +
    "\067\071\117\072\040\073\014\074\103\075\111\076\104" +
    "\077\024\100\036\101\114\104\uffb2\136\101\137\005\001" +
    "\002\000\224\002\uff82\013\uff82\014\uff82\016\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027" +
    "\uff82\031\uff82\032\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82" +
    "\055\uff82\056\uff82\057\uff82\060\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102\uff82\104" +
    "\uff82\106\uff82\110\uff82\111\uff82\112\uff82\113\uff82\114\uff82" +
    "\115\uff82\116\uff82\121\uff82\122\uff82\124\uff82\125\uff82\126" +
    "\uff82\127\uff82\130\uff82\131\uff82\132\uff82\133\uff82\134\uff82" +
    "\135\uff82\136\uff82\137\uff82\001\002\000\152\002\uffb6\013" +
    "\uffb6\014\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\104\uffb6\136\uffb6\137\uffb6\001\002\000" +
    "\040\111\221\112\207\113\215\114\205\115\204\116\214" +
    "\121\216\122\213\125\220\126\210\127\206\130\217\131" +
    "\211\132\212\134\u012c\001\002\000\152\002\uffb8\013\uffb8" +
    "\014\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\104\uffb8\136\uffb8\137\uffb8\001\002\000\152" +
    "\002\uffb9\013\uffb9\014\uffb9\016\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9" +
    "\032\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\104\uffb9\136\uffb9\137\uffb9" +
    "\001\002\000\004\106\u012e\001\002\000\004\134\u012f\001" +
    "\002\000\152\002\uffde\013\uffde\014\uffde\016\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\104\uffde\136" +
    "\uffde\137\uffde\001\002\000\004\033\u0131\001\002\000\004" +
    "\105\u0132\001\002\000\074\004\170\005\176\006\200\007" +
    "\172\010\165\011\163\015\160\034\022\035\007\036\073" +
    "\037\012\040\047\041\054\042\061\071\117\072\040\073" +
    "\014\074\103\075\111\076\104\077\024\100\036\101\114" +
    "\103\175\105\166\112\164\113\171\123\174\137\161\001" +
    "\002\000\040\106\u0134\111\221\112\207\113\215\114\205" +
    "\115\204\116\214\121\216\122\213\125\220\126\210\127" +
    "\206\130\217\131\211\132\212\001\002\000\004\134\u0135" +
    "\001\002\000\152\002\uffac\013\uffac\014\uffac\016\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\031\uffac\032\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\104\uffac" +
    "\136\uffac\137\uffac\001\002\000\152\002\ufffc\013\ufffc\014" +
    "\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc" +
    "\101\ufffc\104\ufffc\136\ufffc\137\ufffc\001\002\000\224\002" +
    "\uff7e\013\uff7e\014\uff7e\016\uff7e\020\uff7e\021\uff7e\022\uff7e" +
    "\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\031\uff7e\032" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e" +
    "\057\uff7e\060\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e" +
    "\077\uff7e\100\uff7e\101\uff7e\102\uff7e\104\uff7e\106\uff7e\110" +
    "\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\115\uff7e\116\uff7e" +
    "\121\uff7e\122\uff7e\124\uff7e\125\uff7e\126\uff7e\127\uff7e\130" +
    "\uff7e\131\uff7e\132\uff7e\133\uff7e\134\uff7e\135\uff7e\136\uff7e" +
    "\137\uff7e\001\002\000\224\002\uff78\013\uff78\014\uff78\016" +
    "\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78" +
    "\026\uff78\027\uff78\031\uff78\032\uff78\034\uff78\035\uff78\036" +
    "\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053" +
    "\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\062\uff78" +
    "\063\uff78\064\uff78\065\uff78\070\uff78\071\uff78\072\uff78\073" +
    "\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78" +
    "\102\uff78\104\uff78\106\uff78\110\uff78\111\uff78\112\uff78\113" +
    "\uff78\114\uff78\115\uff78\116\uff78\121\uff78\122\uff78\124\uff78" +
    "\125\uff78\126\uff78\127\uff78\130\uff78\131\uff78\132\uff78\133" +
    "\uff78\134\uff78\135\uff78\136\uff78\137\uff78\001\002\000\152" +
    "\002\ufffd\013\ufffd\014\ufffd\016\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\031\ufffd" +
    "\032\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076" +
    "\ufffd\077\ufffd\100\ufffd\101\ufffd\104\ufffd\136\ufffd\137\ufffd" +
    "\001\002\000\074\004\170\005\176\006\200\007\172\010" +
    "\165\011\163\015\160\034\022\035\007\036\073\037\012" +
    "\040\047\041\054\042\061\071\117\072\040\073\014\074" +
    "\103\075\111\076\104\077\024\100\036\101\114\103\175" +
    "\105\166\112\164\113\171\123\174\137\161\001\002\000" +
    "\006\106\u013c\133\264\001\002\000\004\134\u013d\001\002" +
    "\000\152\002\uffa6\013\uffa6\014\uffa6\016\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\104\uffa6\136\uffa6" +
    "\137\uffa6\001\002\000\074\004\170\005\176\006\200\007" +
    "\172\010\165\011\163\015\160\034\022\035\007\036\073" +
    "\037\012\040\047\041\054\042\061\071\117\072\040\073" +
    "\014\074\103\075\111\076\104\077\024\100\036\101\114" +
    "\103\175\105\166\112\164\113\171\123\174\137\161\001" +
    "\002\000\040\106\u0140\111\221\112\207\113\215\114\205" +
    "\115\204\116\214\121\216\122\213\125\220\126\210\127" +
    "\206\130\217\131\211\132\212\001\002\000\004\103\141" +
    "\001\002\000\152\002\uffad\013\uffad\014\uffad\016\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\031\uffad\032\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\104\uffad" +
    "\136\uffad\137\uffad\001\002\000\152\002\uffb7\013\uffb7\014" +
    "\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\104\uffb7\136\uffb7\137\uffb7\001\002\000\224\002" +
    "\uff79\013\uff79\014\uff79\016\uff79\020\uff79\021\uff79\022\uff79" +
    "\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\031\uff79\032" +
    "\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79" +
    "\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79" +
    "\057\uff79\060\uff79\062\uff79\063\uff79\064\uff79\065\uff79\070" +
    "\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79" +
    "\077\uff79\100\uff79\101\uff79\102\uff79\104\uff79\106\uff79\110" +
    "\uff79\111\uff79\112\uff79\113\uff79\114\uff79\115\uff79\116\uff79" +
    "\121\uff79\122\uff79\124\uff79\125\uff79\126\uff79\127\uff79\130" +
    "\uff79\131\uff79\132\uff79\133\uff79\134\uff79\135\uff79\136\uff79" +
    "\137\uff79\001\002\000\224\002\uff86\013\uff86\014\uff86\016" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\031\uff86\032\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\062\uff86" +
    "\063\uff86\064\uff86\065\uff86\070\uff86\071\uff86\072\uff86\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86" +
    "\102\uff86\104\uff86\106\uff86\110\uff86\111\uff86\112\uff86\113" +
    "\uff86\114\uff86\115\uff86\116\uff86\121\uff86\122\uff86\124\uff86" +
    "\125\uff86\126\uff86\127\uff86\130\uff86\131\uff86\132\uff86\133" +
    "\uff86\134\uff86\135\uff86\136\uff86\137\uff86\001\002\000\004" +
    "\002\001\001\002\000\224\002\uff7d\013\uff7d\014\uff7d\016" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\031\uff7d\032\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\065\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d" +
    "\102\uff7d\104\uff7d\106\uff7d\110\uff7d\111\uff7d\112\uff7d\113" +
    "\uff7d\114\uff7d\115\uff7d\116\uff7d\121\uff7d\122\uff7d\124\uff7d" +
    "\125\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\132\uff7d\133" +
    "\uff7d\134\uff7d\135\uff7d\136\uff7d\137\uff7d\001\002\000\224" +
    "\002\uff83\013\uff83\014\uff83\016\uff83\020\uff83\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\031\uff83" +
    "\032\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\062\uff83\063\uff83\064\uff83\065\uff83" +
    "\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076" +
    "\uff83\077\uff83\100\uff83\101\uff83\102\uff83\104\uff83\106\uff83" +
    "\110\uff83\111\uff83\112\uff83\113\uff83\114\uff83\115\uff83\116" +
    "\uff83\121\uff83\122\uff83\124\uff83\125\uff83\126\uff83\127\uff83" +
    "\130\uff83\131\uff83\132\uff83\133\uff83\134\uff83\135\uff83\136" +
    "\uff83\137\uff83\001\002\000\004\134\u0149\001\002\000\152" +
    "\002\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\101\uffe1\104\uffe1\136\uffe1\137\uffe1" +
    "\001\002\000\224\002\uff85\013\uff85\014\uff85\016\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\031\uff85\032\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\056\uff85\057\uff85\060\uff85\062\uff85\063\uff85" +
    "\064\uff85\065\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074" +
    "\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85" +
    "\104\uff85\106\uff85\110\uff85\111\uff85\112\uff85\113\uff85\114" +
    "\uff85\115\uff85\116\uff85\121\uff85\122\uff85\124\uff85\125\uff85" +
    "\126\uff85\127\uff85\130\uff85\131\uff85\132\uff85\133\uff85\134" +
    "\uff85\135\uff85\136\uff85\137\uff85\001\002\000\014\102\155" +
    "\105\u0159\107\157\134\uff9d\135\u015a\001\002\000\006\107" +
    "\127\137\u014d\001\002\000\006\105\u014e\135\u014f\001\002" +
    "\000\036\014\055\050\006\051\050\052\072\053\116\054" +
    "\075\056\021\060\060\062\105\063\115\064\027\065\107" +
    "\106\u0154\137\152\001\002\000\006\066\133\067\134\001" +
    "\002\000\004\105\u0151\001\002\000\004\106\u0152\001\002" +
    "\000\004\103\141\001\002\000\152\002\uffbf\013\uffbf\014" +
    "\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\104\uffbf\136\uffbf\137\uffbf\001\002\000\004\103" +
    "\141\001\002\000\006\106\u0156\133\277\001\002\000\004" +
    "\103\141\001\002\000\152\002\uffc1\013\uffc1\014\uffc1\016" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\070\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\104\uffc1\136\uffc1\137\uffc1\001\002\000\152\002\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\104\uffc0\136\uffc0\137\uffc0\001\002\000" +
    "\036\014\055\050\006\051\050\052\072\053\116\054\075" +
    "\056\021\060\060\062\105\063\115\064\027\065\107\106" +
    "\u015f\137\152\001\002\000\006\066\133\067\134\001\002" +
    "\000\004\105\u015c\001\002\000\004\106\u015d\001\002\000" +
    "\004\103\141\001\002\000\152\002\uffc2\013\uffc2\014\uffc2" +
    "\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\104\uffc2\136\uffc2\137\uffc2\001\002\000\004\103\141" +
    "\001\002\000\006\106\u0161\133\277\001\002\000\004\103" +
    "\141\001\002\000\152\002\uffc4\013\uffc4\014\uffc4\016\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\104" +
    "\uffc4\136\uffc4\137\uffc4\001\002\000\152\002\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100" +
    "\uffc3\101\uffc3\104\uffc3\136\uffc3\137\uffc3\001\002\000\074" +
    "\004\170\005\176\006\200\007\172\010\165\011\163\015" +
    "\160\034\022\035\007\036\073\037\012\040\047\041\054" +
    "\042\061\071\117\072\040\073\014\074\103\075\111\076" +
    "\104\077\024\100\036\101\114\103\175\105\166\112\164" +
    "\113\171\123\174\137\161\001\002\000\040\106\u0166\111" +
    "\221\112\207\113\215\114\205\115\204\116\214\121\216" +
    "\122\213\125\220\126\210\127\206\130\217\131\211\132" +
    "\212\001\002\000\004\134\u0167\001\002\000\152\002\uffe4" +
    "\013\uffe4\014\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077" +
    "\uffe4\100\uffe4\101\uffe4\104\uffe4\136\uffe4\137\uffe4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\076\002\017\003\067\004\055\005\120\007" +
    "\022\012\033\013\112\014\041\015\014\016\051\017\016" +
    "\020\036\021\012\023\107\024\062\025\075\026\030\027" +
    "\064\030\050\040\070\041\073\042\010\043\015\045\024" +
    "\047\111\050\077\051\076\052\040\053\027\055\034\001" +
    "\001\000\002\001\001\000\006\035\u014b\036\253\001\001" +
    "\000\002\001\001\000\004\037\u0149\001\001\000\004\037" +
    "\u0147\001\001\000\002\001\001\000\004\037\u0146\001\001" +
    "\000\002\001\001\000\004\037\u0145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0143\001\001\000\002\001" +
    "\001\000\004\037\u0142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0137\001\001\000\002\001" +
    "\001\000\004\037\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u012f\001\001\000\002\001\001\000" +
    "\016\011\u0129\040\166\041\073\042\010\043\015\046\176" +
    "\001\001\000\002\001\001\000\004\037\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0108\001\001\000\004\037\u0106\001\001\000\002\001" +
    "\001\000\004\037\u0104\001\001\000\002\001\001\000\004" +
    "\037\u0102\001\001\000\004\037\u0100\001\001\000\072\004" +
    "\144\005\120\007\022\012\033\013\112\014\041\015\014" +
    "\016\051\017\016\020\036\021\012\023\107\024\062\025" +
    "\075\026\030\027\064\030\050\040\070\041\073\042\010" +
    "\043\015\045\024\047\111\050\077\051\076\052\040\053" +
    "\027\055\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\357\001" +
    "\001\000\004\037\356\001\001\000\002\001\001\000\004" +
    "\037\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\345\001\001\000\002\001\001\000\004" +
    "\035\124\001\001\000\006\035\304\036\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\147\006\150\012\145\001\001\000\004\010\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\137\001\001\000\002\001\001" +
    "\000\074\003\142\004\055\005\120\007\022\012\033\013" +
    "\112\014\041\015\014\016\051\017\016\020\036\021\012" +
    "\023\107\024\062\025\075\026\030\027\064\030\050\040" +
    "\070\041\073\042\010\043\015\045\024\047\111\050\077" +
    "\051\076\052\040\053\027\055\034\001\001\000\002\001" +
    "\001\000\072\004\144\005\120\007\022\012\033\013\112" +
    "\014\041\015\014\016\051\017\016\020\036\021\012\023" +
    "\107\024\062\025\075\026\030\027\064\030\050\040\070" +
    "\041\073\042\010\043\015\045\024\047\111\050\077\051" +
    "\076\052\040\053\027\055\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\155\036\153\001\001\000\002\001\001\000" +
    "\016\011\272\040\166\041\073\042\010\043\015\046\176" +
    "\001\001\000\002\001\001\000\016\011\161\040\166\041" +
    "\073\042\010\043\015\046\176\001\001\000\002\001\001" +
    "\000\004\036\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\250\040\166\041\073\042\010\043\015" +
    "\046\176\001\001\000\002\001\001\000\016\011\246\040" +
    "\166\041\073\042\010\043\015\046\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\243\040\166\041" +
    "\073\042\010\043\015\046\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\242\040\166\041\073\042" +
    "\010\043\015\046\176\001\001\000\020\011\201\040\166" +
    "\041\073\042\010\043\015\046\176\056\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\236\040\166\041\073\042\010\043\015\046\176\001\001" +
    "\000\016\011\235\040\166\041\073\042\010\043\015\046" +
    "\176\001\001\000\016\011\234\040\166\041\073\042\010" +
    "\043\015\046\176\001\001\000\016\011\233\040\166\041" +
    "\073\042\010\043\015\046\176\001\001\000\016\011\232" +
    "\040\166\041\073\042\010\043\015\046\176\001\001\000" +
    "\016\011\231\040\166\041\073\042\010\043\015\046\176" +
    "\001\001\000\016\011\230\040\166\041\073\042\010\043" +
    "\015\046\176\001\001\000\016\011\227\040\166\041\073" +
    "\042\010\043\015\046\176\001\001\000\016\011\226\040" +
    "\166\041\073\042\010\043\015\046\176\001\001\000\016" +
    "\011\225\040\166\041\073\042\010\043\015\046\176\001" +
    "\001\000\016\011\224\040\166\041\073\042\010\043\015" +
    "\046\176\001\001\000\016\011\223\040\166\041\073\042" +
    "\010\043\015\046\176\001\001\000\016\011\222\040\166" +
    "\041\073\042\010\043\015\046\176\001\001\000\016\011" +
    "\221\040\166\041\073\042\010\043\015\046\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\241\040\166\041\073\042" +
    "\010\043\015\046\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\245\042\010\043\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\257" +
    "\034\261\040\166\041\073\042\010\043\015\046\176\001" +
    "\001\000\002\001\001\000\016\011\161\040\166\041\073" +
    "\042\010\043\015\046\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\264\040\166\041\073\042\010\043\015\046\176\001" +
    "\001\000\002\001\001\000\016\011\266\040\166\041\073" +
    "\042\010\043\015\046\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\271\040\166\041\073\042\010" +
    "\043\015\046\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\274\040\166\041\073\042\010\043\015" +
    "\046\176\001\001\000\002\001\001\000\004\044\300\001" +
    "\001\000\006\005\147\012\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\304\036\302\001\001\000" +
    "\002\001\001\000\016\011\307\040\166\041\073\042\010" +
    "\043\015\046\176\001\001\000\002\001\001\000\016\011" +
    "\306\040\166\041\073\042\010\043\015\046\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\311\040" +
    "\166\041\073\042\010\043\015\046\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\315\001\001\000\002\001\001\000\010\005\147\006\330" +
    "\012\145\001\001\000\004\010\320\001\001\000\002\001" +
    "\001\000\010\005\147\006\323\012\145\001\001\000\004" +
    "\044\326\001\001\000\002\001\001\000\004\044\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\333" +
    "\001\001\000\002\001\001\000\004\044\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\147\012\337\031\336\001\001\000\006\005\147\012" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\257\034\350\040\166" +
    "\041\073\042\010\043\015\046\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\361\040\166" +
    "\041\073\042\010\043\015\046\176\001\001\000\002\001" +
    "\001\000\004\044\363\001\001\000\002\001\001\000\006" +
    "\015\365\044\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\371\040\166\041\073" +
    "\042\010\043\015\046\176\001\001\000\002\001\001\000" +
    "\016\011\373\040\166\041\073\042\010\043\015\046\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\377\040\166\041\073\042\010\043\015" +
    "\046\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\147\012\u010e\014\u010d" +
    "\033\u010b\040\u010c\041\073\042\010\043\015\001\001\000" +
    "\004\036\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\u0110\040" +
    "\166\041\073\042\010\043\015\046\176\001\001\000\002" +
    "\001\001\000\016\014\u0113\040\u0112\041\073\042\010\043" +
    "\015\054\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\u0119\040\166\041\073" +
    "\042\010\043\015\046\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\u011d\032\u011f\001\001\000\016" +
    "\011\u0124\040\166\041\073\042\010\043\015\046\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
    "\u0123\004\055\005\120\007\022\012\033\013\112\014\041" +
    "\015\014\016\051\017\016\020\036\021\012\023\107\024" +
    "\062\025\075\026\030\027\064\030\050\040\070\041\073" +
    "\042\010\043\015\045\024\047\111\050\077\051\076\052" +
    "\040\053\027\055\034\001\001\000\072\004\144\005\120" +
    "\007\022\012\033\013\112\014\041\015\014\016\051\017" +
    "\016\020\036\021\012\023\107\024\062\025\075\026\030" +
    "\027\064\030\050\040\070\041\073\042\010\043\015\045" +
    "\024\047\111\050\077\051\076\052\040\053\027\055\034" +
    "\001\001\000\002\001\001\000\074\003\u0126\004\055\005" +
    "\120\007\022\012\033\013\112\014\041\015\014\016\051" +
    "\017\016\020\036\021\012\023\107\024\062\025\075\026" +
    "\030\027\064\030\050\040\070\041\073\042\010\043\015" +
    "\045\024\047\111\050\077\051\076\052\040\053\027\055" +
    "\034\001\001\000\072\004\144\005\120\007\022\012\033" +
    "\013\112\014\041\015\014\016\051\017\016\020\036\021" +
    "\012\023\107\024\062\025\075\026\030\027\064\030\050" +
    "\040\070\041\073\042\010\043\015\045\024\047\111\050" +
    "\077\051\076\052\040\053\027\055\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\u0132\040\166\041\073\042\010\043\015\046\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\257\034\u013a\040\166\041" +
    "\073\042\010\043\015\046\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\u013e\040" +
    "\166\041\073\042\010\043\015\046\176\001\001\000\002" +
    "\001\001\000\004\044\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\155" +
    "\036\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\147\006\u0154\012\145\001\001\000\004\010\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\u0152\001\001\000\002\001\001\000\004\044\u0157\001\001" +
    "\000\002\001\001\000\004\044\u0156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\147\006\u015f\012\145" +
    "\001\001\000\004\010\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\u015d\001\001\000\002\001\001" +
    "\000\004\044\u0162\001\001\000\002\001\001\000\004\044" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\u0164\040\166\041\073\042\010\043\015\046\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_R$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_R$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_R$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    public Arbol_R AST;
    public void syntax_error(Symbol s){ 
            Errores.agregar_error("Error de Orden de sentencia: "+s.value,s.left, s.right,"Sintactico");
            System.err.println("Error Sintactico en la Linea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_R$actions {
  private final Sintactico_R parser;

  /** Constructor */
  CUP$Sintactico_R$actions(Sintactico_R parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_R$do_action_part00000000(
    int                        CUP$Sintactico_R$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_R$parser,
    java.util.Stack            CUP$Sintactico_R$stack,
    int                        CUP$Sintactico_R$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_R$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_R$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_R$parser.done_parsing();
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Instrucciones 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		AST=new Arbol_R(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Instrucciones ::= Instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= SentenciaDeclaracion puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= SentenciaAsignacion puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= ListaAccesos puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT=new INSACCESO(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= SentenciaImpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= SentenciaRetorno 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= SentenciaDetener 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= SentenciaContinuar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= SentenciaDecFuncion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= SentenciaImportar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= SentenciaDefinir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= SentenciaSI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= SentenciaSeleccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= SentenciaFor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= SentenciaMientras 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= SentenciaRepeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= SentenciaFUSION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= SentenciaAbrir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= SentenciaBuscar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= SentenciaEscribir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= SentenciaCerrar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= SentenciaLeer 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= SentenciaMostrar_Ventana 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= SentenciaMensaje 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= agregar_componente Exps puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT =  new INSTANCIAR_COMPONENTE("agregar_componente",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentenciaMensaje ::= mensaje Exps puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		Tipo t = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.mensaje);
                                                                       RESULT = new MENSAJE(t,b,aleft,aright);
                                                                      
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaMensaje",43, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SentenciaMostrar_Ventana ::= mostrar_ventana abrirparentesis E cerrarparentesis puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		RESULT = new MOSTRAR_VENTANA(b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaMostrar_Ventana",35, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SentenciaImportar ::= numeral importar E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new IMPORTAR(b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaImportar",20, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SentenciaDefinir ::= numeral definir identificador E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new CONSTANTE(b,c,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDefinir",19, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SentenciaAbrir ::= abrir Exps puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new ABRIR(b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaAbrir",37, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentenciaBuscar ::= buscar_abrir Exps puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new BUSCAR_ABRIR(b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaBuscar",38, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SentenciaEscribir ::= escribir Exps puntocoma 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new ESCRIBIR(a,bleft,bright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaEscribir",39, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SentenciaCerrar ::= cerrar abrirparentesis cerrarparentesis puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		RESULT = new CERRAR(aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaCerrar",40, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SentenciaLeer ::= leer Exps puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new LEER(b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaLeer",41, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SentenciaFUSION ::= fusion identificador abrirllave Declaraciones cerrarllave puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		RESULT = new FUSION(b,c,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaFUSION",22, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Declaraciones ::= Declaraciones SentenciaDeclaracion puntocoma 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT= a; RESULT.add(b);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Declaraciones",23, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Declaraciones ::= SentenciaDeclaracion puntocoma 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Declaraciones",23, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= tipoentero 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.entero); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= tipocaracter 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.caracter); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= tipodecimal 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.doble); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= tipoboleano 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.booleano); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= etiqueta 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.et); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= cajatexto 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.caja); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= cajaareatexto 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.cajaarea); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= cajanumero 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.cajanum); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= contrasena 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.cajapass); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= cadenaR 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.rstring); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= boton 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.componente,Tipo.TipoComponente.boton); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= vacio 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new Tipo(Tipo.TipoSimbolo.vacio); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BloqueSentencias ::= abrirllave Instrucciones cerrarllave 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		 RESULT =a; 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",34, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BloqueSentencias ::= abrirllave cerrarllave 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("BloqueSentencias",34, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SentenciaDecFuncion ::= tipo identificador abrirparentesis parametros cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,b,c,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SentenciaDecFuncion ::= tipo identificador abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,null,c,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SentenciaDecFuncion ::= tipo identificador dospuntos evento abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,null,c,d,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SentenciaDecFuncion ::= tipo identificador dospuntos evento abrirparentesis parametros cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,b,c,d,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SentenciaDecFuncion ::= tipo Dimensiones identificador abrirparentesis parametros cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,b,c,null,Integer.parseInt(dim.toString()),aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SentenciaDecFuncion ::= tipo Dimensiones identificador abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,null,c,null,Integer.parseInt(dim.toString()),aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SentenciaDecFuncion ::= tipo Dimensiones identificador dospuntos evento abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,null,c,d,Integer.parseInt(dim.toString()),aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SentenciaDecFuncion ::= identificador identificador abrirparentesis parametros cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo=new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT = new FUNCION(tipo,a,b,c,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SentenciaDecFuncion ::= identificador identificador abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo=new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT = new FUNCION(tipo,a,null,c,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SentenciaDecFuncion ::= identificador identificador dospuntos evento abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo=new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT = new FUNCION(tipo,a,null,c,d,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SentenciaDecFuncion ::= identificador Dimensiones identificador abrirparentesis parametros cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo=new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT = new FUNCION(tipo,a,b,c,null,Integer.parseInt(dim.toString()),aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SentenciaDecFuncion ::= identificador Dimensiones identificador abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo=new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT = new FUNCION(tipo,a,null,c,null,Integer.parseInt(dim.toString()),aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SentenciaDecFuncion ::= identificador Dimensiones identificador dospuntos evento abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo=new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT = new FUNCION(tipo,a,null,c,d,Integer.parseInt(dim.toString()),aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SentenciaDecFuncion ::= tipo principal abrirparentesis cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new FUNCION(t,a,null,c,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDecFuncion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // evento ::= iniciar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("evento",6, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // evento ::= click 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("evento",6, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= parametros coma SentenciaDeclaracion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros ::= SentenciaDeclaracion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SentenciaRetorno ::= regresar E puntocoma 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new RETORNAR(a,rleft,rright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaRetorno",17, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SentenciaRetorno ::= regresar puntocoma 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new RETORNAR(null,rleft,rright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaRetorno",17, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SentenciaDetener ::= romper puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new DETENER(aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDetener",18, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SentenciaContinuar ::= siga puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new CONTINUAR(aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaContinuar",21, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SentenciaSeleccion ::= seleccion abrirparentesis E cerrarparentesis abrirllave Listacasos cerrarllave 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT = new SELECCIONA(b,c,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaSeleccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Listacasos ::= Listacasos SentenciaCaso 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Listacasos",24, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Listacasos ::= SentenciaCaso 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new LinkedList(); RESULT.add(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Listacasos",24, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentenciaCaso ::= caso E dospuntos Instrucciones 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new CASO(b,c,false,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaCaso",16, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentenciaCaso ::= defecto dospuntos Instrucciones 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new CASO(null,c,true,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaCaso",16, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SentenciaSI ::= si abrirparentesis E cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new SI(b,c,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaSI",11, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SentenciaSI ::= si abrirparentesis E cerrarparentesis BloqueSentencias sino SentenciaSI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new SI(b,c,d,false,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaSI",11, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SentenciaSI ::= si abrirparentesis E cerrarparentesis BloqueSentencias sino BloqueSentencias 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		SI sino = new SI(new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.booleano),true,eleft,eright),d,null,true,eleft,eright);RESULT = new SI(b,c,sino,false,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaSI",11, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SentenciaMientras ::= mientras abrirparentesis E cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new WHILE(b,c,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaMientras",14, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SentenciaRepeat ::= hacermientras BloqueSentencias cuando abrirparentesis E cerrarparentesis puntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		RESULT=new REPEAT(c,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaRepeat",15, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SentenciaFor ::= ciclofor abrirparentesis Inicializacion puntocoma E puntocoma AUMENTO cerrarparentesis BloqueSentencias 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new FOR(b,c,d,e,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaFor",13, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Inicializacion ::= SentenciaDeclaracion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Inicializacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Inicializacion ::= SentenciaAsignacion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Inicializacion",25, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AUMENTO ::= SentenciaAsignacion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("AUMENTO",42, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AUMENTO ::= ListaAccesos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new INSACCESO(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("AUMENTO",42, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SentenciaImpresion ::= imprimir abrirparentesis ListaExpresiones cerrarparentesis puntocoma 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		RESULT = new IMPRIMIR(a,bleft,bright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaImpresion",9, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListaExpresiones ::= ListaExpresiones coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",26, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListaExpresiones ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new LinkedList(); RESULT.add(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",26, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SentenciaDeclaracion ::= tipo identificador 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new DECLARACION(t,a,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SentenciaDeclaracion ::= tipo identificador igual E 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new DECLARACION(t,a,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SentenciaDeclaracion ::= tipo identificador Dimensiones 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new DECLARACION_ARREGLO(t,a,null,Integer.parseInt(b.toString()),aleft,aright,true);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SentenciaDeclaracion ::= tipo identificador Dimensiones igual E 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new DECLARACION_ARREGLO(t,a,c,Integer.parseInt(b.toString()),aleft,aright,true);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SentenciaDeclaracion ::= tipo identificador DimensionesExplicitas 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new DECLARACION_ARREGLO(t,a,null,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SentenciaDeclaracion ::= tipo identificador DimensionesExplicitas igual E 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT=new DECLARACION_ARREGLO(t,a,c,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SentenciaDeclaracion ::= identificador identificador 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo= new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT=new DECLARACION(tipo,a,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SentenciaDeclaracion ::= identificador identificador igual E 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo= new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT=new DECLARACION(tipo,a,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SentenciaDeclaracion ::= identificador identificador Dimensiones 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo= new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT=new DECLARACION_ARREGLO(tipo,a,null,Integer.parseInt(b.toString()),aleft,aright,true);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SentenciaDeclaracion ::= identificador identificador Dimensiones igual E 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo= new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT=new DECLARACION_ARREGLO(tipo,a,c,Integer.parseInt(b.toString()),aleft,aright,true);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SentenciaDeclaracion ::= identificador identificador DimensionesExplicitas 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo= new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT=new DECLARACION_ARREGLO(tipo,a,null,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SentenciaDeclaracion ::= identificador identificador DimensionesExplicitas igual E 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		Tipo tipo= new Tipo(Tipo.TipoSimbolo.objeto,t);RESULT=new DECLARACION_ARREGLO(tipo,a,c,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Dimensiones ::= Dimensiones abrircorchete cerrarcorchete 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		RESULT = Integer.parseInt(a.toString()) + 1;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Dimensiones",27, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Dimensiones ::= abrircorchete cerrarcorchete 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Dimensiones",27, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DimensionesExplicitas ::= DimensionesExplicitas abrircorchete E cerrarcorchete 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("DimensionesExplicitas",28, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DimensionesExplicitas ::= abrircorchete E cerrarcorchete 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("DimensionesExplicitas",28, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SentenciaAsignacion ::= ListaAccesos igual E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		 RESULT = new ASIGNACION(a,b,opleft,opright); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("SentenciaAsignacion",10, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListaAccesos ::= ListaAccesos punto Acceso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		 RESULT = new ACCESO(a,b,opleft,opright); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("ListaAccesos",30, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ListaAccesos ::= Acceso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("ListaAccesos",30, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Acceso ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		 RESULT = new ID(a,aleft,aright); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Acceso",31, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Acceso ::= Llamada 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Acceso",31, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Acceso ::= identificador DimensionesExplicitas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		 RESULT = new ACCESOARREGLO(a,b,aleft,aright); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Acceso",31, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Acceso ::= identificador masplus 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		 RESULT = new POSFIJO(a,"++",aleft,aright); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Acceso",31, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Acceso ::= identificador menosplus 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		 RESULT = new POSFIJO(a,"--",aleft,aright); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Acceso",31, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Llamada ::= identificador abrirparentesis cerrarparentesis 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		RESULT=new LLAMADA_FUNCION(a,null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Llamada",32, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Llamada ::= identificador abrirparentesis ListaExpresiones cerrarparentesis 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT=new LLAMADA_FUNCION(a,b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Llamada",32, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Llamada ::= llamada_a_nativas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Llamada",32, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Exps ::= abrirparentesis ListaExpresiones cerrarparentesis 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Exps",29, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Exps ::= abrirparentesis cerrarparentesis 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("Exps",29, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // llamada_a_nativas ::= pesode Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("pesode",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // llamada_a_nativas ::= reservar Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("reservar",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // llamada_a_nativas ::= atexto Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("atexto",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // llamada_a_nativas ::= concatenar Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("concatenar",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // llamada_a_nativas ::= aentero Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("aentero",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // llamada_a_nativas ::= adecimal Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("adecimal",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // llamada_a_nativas ::= compequals Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("compequals",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // llamada_a_nativas ::= tamform Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("tamform",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // llamada_a_nativas ::= settexto Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("settexto",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // llamada_a_nativas ::= setalto Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("setalto",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // llamada_a_nativas ::= setancho Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("setancho",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // llamada_a_nativas ::= setpos Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("setpos",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // llamada_a_nativas ::= gettexto Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("gettexto",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // llamada_a_nativas ::= getancho Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("getancho",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // llamada_a_nativas ::= getalto Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("getalto",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // llamada_a_nativas ::= getpos Exps 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT =  new FUNCION_NATIVA("getpos",b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("llamada_a_nativas",33, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= E sumalogica E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new OR(a,b,"||",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= E multiplicacionlogica E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new AND(a,b,"&&",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= notlogico E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new NOT(a,"!",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= E menor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new MENOR(a,b,"<",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= E mayor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new MAYOR(a,b,">",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new MENORIGUAL(a,b,"<=",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new MAYORIGUAL(a,b,">=",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new IGUALIGUAL(a,b,"==",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new DIFERENTE(a,b,"<>",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new SUMA(a,b,"+",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new RESTA(a,b,"-",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new MUL(a,b,"*",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E ::= E div E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new DIV(a,b,"/",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new POTENCIA(a,b,"^",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= new MOD(a,b,"%",opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // E ::= abrirparentesis E cerrarparentesis 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT= a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E ::= INSTANCIAARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT= a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E ::= menos E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new MENOSUNARIO("-",a,opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E ::= por E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new REFERENCIA("*",a,opleft,opright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // E ::= ListaAccesos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.entero),a,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.doble),a,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // E ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.caracter),a,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // E ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new CADENA(new Tipo(Tipo.TipoSimbolo.cadena),a,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // E ::= falso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.booleano),a,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // E ::= verdadero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.booleano),a,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // E ::= nulo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new PRIMITIVO(new Tipo(Tipo.TipoSimbolo.nulo),null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // INSTANCIAARREGLO ::= abrirllave LISTAINSTANCIA cerrarllave 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT= new INSTANCIA_ARREGLO(b,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("INSTANCIAARREGLO",36, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // INSTANCIAARREGLO ::= abrirllave cerrarllave 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)).value;
		RESULT= new INSTANCIA_ARREGLO(null,aleft,aright);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("INSTANCIAARREGLO",36, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LISTAINSTANCIA ::= LISTAINSTANCIA coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("LISTAINSTANCIA",44, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.elementAt(CUP$Sintactico_R$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LISTAINSTANCIA ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico_R$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico_R$result = parser.getSymbolFactory().newSymbol("LISTAINSTANCIA",44, ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_R$stack.peek()), RESULT);
            }
          return CUP$Sintactico_R$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_R$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_R$do_action(
    int                        CUP$Sintactico_R$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_R$parser,
    java.util.Stack            CUP$Sintactico_R$stack,
    int                        CUP$Sintactico_R$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_R$do_action_part00000000(
                               CUP$Sintactico_R$act_num,
                               CUP$Sintactico_R$parser,
                               CUP$Sintactico_R$stack,
                               CUP$Sintactico_R$top);
    }
}

}
